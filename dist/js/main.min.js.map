{"version":3,"file":"main.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAmB,UAAID,IAEvBD,EAAgB,UAAIC,GACrB,CATD,CASGK,MAAM,I,mBCRT,IAAIC,EAAsB,CCA1BA,EAAwB,CAACL,EAASM,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAER,EAASO,IAC5EE,OAAOC,eAAeV,EAASO,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDF,EAAwB,CAACQ,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,4BCG3E,MAAMI,EACTC,cACIC,KAAKC,OAAS,IACdD,KAAKE,OAAS,KACdF,KAAKG,OAAS,IACdH,KAAKI,OAAS,KACdJ,KAAKK,QAAU,MACfL,KAAKM,UAAY,QACjBN,KAAKO,SAAW,OAChBP,KAAKQ,cAAgB,YACrBR,KAAKS,aAAe,WACpBT,KAAKU,WAAa,SAClBV,KAAKW,UAAY,QACjBX,KAAKY,aAAe,MACpBZ,KAAKa,aAAe,WACpBb,KAAKc,UAAY,QACjBd,KAAKe,SAAW,OAChBf,KAAKgB,UAAY,QACjBhB,KAAKiB,cAAgB,YACrBjB,KAAKkB,cAAgB,YACrBlB,KAAKmB,YAAc,UACnBnB,KAAKoB,SAAW,OAChBpB,KAAKqB,YAAc,UACnBrB,KAAKsB,UAAY,QACjBtB,KAAKuB,UAAY,QACjBvB,KAAKwB,WAAa,SAClBxB,KAAKyB,SAAW,OAChBzB,KAAK0B,SAAW,OAChB1B,KAAK2B,WAAa,SAClB3B,KAAK4B,SAAW,OAChB5B,KAAK6B,WAAa,SAClB7B,KAAK8B,UAAY,IACjB9B,KAAK+B,WAAa,IAClB/B,KAAKgC,WAAa,QAClBhC,KAAKiC,aAAe,WACpBjC,KAAKkC,gBAAkB,SACvBlC,KAAKmC,iBAAmB,UACxBnC,KAAKoC,eAAiB,QACtBpC,KAAKqC,gBAAkB,SACvBrC,KAAKsC,oBAAsB,aAC3BtC,KAAKuC,cAAgB,kBACrBvC,KAAKwC,WAAa,oBAClBxC,KAAKyC,YAAc,gBACnBzC,KAAK0C,QAAU,WACf1C,KAAK2C,YAAc,IACnB3C,KAAK4C,cAAgB,SACrB5C,KAAK6C,aAAe,CAAC,KAAM,KAAM,KAAM,KAAM,MAC7C7C,KAAK8C,WAAa,EAClB9C,KAAK+C,YAAc,IACnB/C,KAAKgD,aAAe,IACxB,EC9CG,MAAMC,UAAgBnD,EAIzBC,cAEImD,QAUAlD,KAAKmD,aAAe,CAACC,EAAKC,EAAMC,GAAS,IACjCA,EACOF,EAAIG,MAAMF,GAAMG,MAGhBH,EAAOD,EAAIG,MAAMF,GAAMG,MAYtCxD,KAAKyD,YAAc,CAACL,EAAKC,EAAMC,GAAS,IAChCA,EACOF,EAAIG,MAAMF,GAAM,GAGhBD,EAAIG,MAAMF,GAAM,GAAKA,CAGxC,CAQAK,MAAMC,EAAW,MAEb,IAAIC,EAAS,CAAC,EAgCd,OA9BAA,EAAS,CACLC,QAAQ,EACRC,QAAS,WAGRH,EAO0B,iBAAf,EACsC,GAA9CI,SAASC,iBAAiBL,GAAUM,SACpCL,EAAS,CACLC,QAAQ,EACRC,QAAS,iBAAiBH,wCAKP,iBAAf,GACW,GAAnBA,EAASM,SACTL,EAAS,CACLC,QAAQ,EACRC,QAAS,yDAnBjBF,EAAS,CACLC,QAAQ,EACRC,QAAS,qDAsBVF,CACX,CAQAD,SAASA,GAEL,GAA0B,iBAAf,EACP,KAAM,yCAEL,GAAI3D,KAAK0D,MAAMC,GAAkB,OAElC,OAAOI,SAASG,cAAcP,GAG9B,MAAM3D,KAAK0D,MAAMC,GAAmB,OAE5C,CAQAQ,UAAUR,GAEN,GAA0B,iBAAf,EACP,KAAM,yCAEL,GAAI3D,KAAK0D,MAAMC,GAAkB,OAElC,OAAOI,SAASC,iBAAiBL,GAGjC,MAAM3D,KAAK0D,MAAMC,GAAmB,OAE5C,CAUAS,QAAQT,EAAUU,EAAO,OAAQC,EAAY,GACzC,IAAIV,GAAS,EACTW,EAAO,KACPC,EAAeC,OAAOC,YACtBC,EAAaC,KAAKC,IAAId,SAASe,gBAAgBC,aAAcP,GAEjE,IAAIxE,KAAK0D,MAAMC,GAAkB,OAU7B,MAAM3D,KAAK0D,MAAMC,GAAmB,QAexC,MAxB8B,iBAAf,GACPY,EAAOR,SAASG,cAAcP,GAC9BY,EAAOA,EAAKS,yBAEe,iBAAf,IACZT,EAAOZ,EAASqB,yBAOZ,QAARX,EACAT,EAASW,EAAKU,QAAUX,GAAaC,EAAKW,IAAMP,EAAaL,EAGhD,OAARD,EACLT,EAASW,EAAKW,IAAMP,EAAaL,EAGpB,UAARD,IACLT,EAASW,EAAKU,QAAUX,GAGrBV,CACX,CAcAuB,QAAQxB,EAAUyB,EAAQC,EAASC,EAAY,GAAIC,EAAK,GAAIC,EAAQ,GAAIC,EAAQ,CAAC,GAC7E,IAAIC,EAAa,KAEjB,GAA0B,iBAAf,EACP,KAAM,yCAGV,IAAI1F,KAAK0D,MAAM0B,GAAgB,OAS3B,MAAMpF,KAAK0D,MAAM0B,GAAiB,QARV,iBAAb,EACPM,EAAa3B,SAASG,cAAckB,GAEX,iBAAb,IACZM,EAAaN,GAOrB,MAAMO,EAAO5B,SAAS6B,cAAcjC,GAcpC,GAZA2B,EAAUO,SAASC,IACfH,EAAKL,UAAUS,IAAID,EAAI,IAGvBP,GACAI,EAAKK,aAAa,KAAMT,GAGxBC,IACAG,EAAKH,MAAMS,QAAUT,GAGrBC,EACA,IAAK,IAAIS,KAAQT,EACbE,EAAKK,aAAaE,EAAMT,EAAMS,IAOtC,OAHAP,EAAKQ,UAAYd,EACjBK,EAAWU,aAAaT,EAAMD,EAAWW,YAElCV,CACX,CAcAW,OAAO3C,EAAUyB,EAAQC,EAASC,EAAY,GAAIC,EAAK,GAAIC,EAAQ,GAAIC,EAAQ,CAAC,GAC5E,IAAIC,EAAa,KAEjB,GAA0B,iBAAf,EACP,KAAM,yCAGV,IAAI1F,KAAK0D,MAAM0B,GAAgB,OAS3B,MAAMpF,KAAK0D,MAAM0B,GAAiB,QARV,iBAAb,EACPM,EAAa3B,SAASG,cAAckB,GAEX,iBAAb,IACZM,EAAaN,GAOrB,MAAMO,EAAO5B,SAAS6B,cAAcjC,GAcpC,GAZA2B,EAAUO,SAASC,IACfH,EAAKL,UAAUS,IAAID,EAAI,IAGvBP,GACAI,EAAKK,aAAa,KAAMT,GAGxBC,IACAG,EAAKH,MAAMS,QAAUT,GAGrBC,EACA,IAAK,IAAIS,KAAQT,EACbE,EAAKK,aAAaE,EAAMT,EAAMS,IAOtC,OAHAP,EAAKQ,UAAYd,EACjBK,EAAWa,YAAYZ,GAEhBA,CACX,CAQAa,OAAO7C,GACH,IAAIgC,EAAO,KAEX,IAAI3F,KAAK0D,MAAMC,GAAkB,OAS7B,MAAM3D,KAAK0D,MAAMC,GAAmB,QARV,iBAAf,EACPgC,EAAO5B,SAASG,cAAcP,GAEH,iBAAf,IACZgC,EAAOhC,GAOfgC,EAAKa,QACT,CAQAC,MAAMpB,EAAU,IACAtB,SAAS2C,KAAK,aAC1B3C,SAAS0C,MAAMpB,GACftB,SAAS4C,OACb,CAUAC,KAAKC,EAAIC,EAAQ,IAAMC,EAAQC,KAC3B,IAAIC,EAAI,EACJC,EAAWC,aAAY,KAEvB,GAAIF,GAAKF,GAASA,GAAS,EAEvB,OADAK,cAAcF,IACP,EAGXL,IACAI,GAAG,GACJH,EACP,CAQAO,OAAOR,GACH,OAAO9C,SAASuD,iBAAiB,oBAAoB,KACjDT,GAAI,GAEZ,CAQAU,OAAOnE,GACH,OAAOA,EAAIoE,QAAQ,sBAAuB,OAC9C,CAUAA,QAAQpE,EAAKC,EAAMmE,GACf,OAAOpE,EAAIoE,QAAQ,IAAIC,OAAOzH,KAAKuH,OAAOlE,GAAO,KAAMmE,EAC3D,CAQAE,SAASC,EAAM,KACXlD,OAAOmD,SAASC,KAAOF,CAC3B,CAMAE,OACI,OAAO7H,KAAKwH,QAAQ/C,OAAOmD,SAASC,KAAMpD,OAAOmD,SAASE,OAAQ,GACtE,CAMAC,cACI,OAAOtD,OAAOuD,WAAajE,SAASe,gBAAgBmD,WACxD,CAQAC,UAAUC,GAEN,IAAIC,EAAM,IAAIC,eAKd,OAHAD,EAAI1B,KAAK,OAAQyB,GAAM,GACvBC,EAAIE,OAEc,OAAdF,EAAIvE,MAOZ,CAQA0E,KAAKJ,EAAM7E,GAAS,GAEhB,QAAIA,IAEKtD,KAAKkI,UAAUC,KAKR,IAAIK,SAAQ,CAACC,EAASC,KAClC,IAAIC,EAAQ,KAEZC,MAAMT,GACDU,MAAKC,GAAYA,EAASP,SAC1BM,MAAKjF,IACN+E,EAAQ/E,CAAM,IAEbiF,MAAK,KAENJ,EAAQE,EAAM,GAChB,GAIV,CAQAI,KAAKZ,EAAM7E,GAAS,GAEhB,QAAIA,IAEKtD,KAAKkI,UAAUC,KAKR,IAAIK,SAAQ,CAACC,EAASC,KAClC,IAAIC,EAAQ,KAEZC,MAAMT,GACDU,MAAKC,GAAYA,EAASC,SAC1BF,MAAKjF,IACN+E,EAAQ/E,CAAM,IAEbiF,MAAK,KAENJ,EAAQE,EAAM,GAChB,GAIV,CAQAK,KAAKD,GAeD,OAbgB,IAAIP,SAAQ,CAACC,EAASC,KAClC,IAAI9E,EAAS,KACbqF,UAAUC,UAAUC,UAAUJ,GACzBF,MAAK,IAAMjF,GAAS,IAAMwF,IAC3BC,QAAQC,MAAM,eAAgBF,GAC9BxF,GAAS,CAAK,IAEbiF,MAAK,KAENJ,EAAQ7E,EAAO,GACjB,GAIV,CASA2F,SAAS5F,EAAUmC,GACf,IAAIH,EAAO,KAEX,IAAI3F,KAAK0D,MAAMC,GAAkB,OAS7B,MAAM3D,KAAK0D,MAAMC,GAAmB,QARV,iBAAf,EACPgC,EAAO5B,SAASG,cAAcP,GAEH,iBAAf,IACZgC,EAAOhC,GAOVgC,EAAKL,UAAUkE,SAAS1D,IACzBH,EAAKL,UAAUS,IAAID,EAE3B,CASA2D,YAAY9F,EAAUmC,GAClB,IAAIH,EAAO,KAEX,IAAI3F,KAAK0D,MAAMC,GAAkB,OAS7B,MAAM3D,KAAK0D,MAAMC,GAAmB,QARV,iBAAf,EACPgC,EAAO5B,SAASG,cAAcP,GAEH,iBAAf,IACZgC,EAAOhC,GAOXgC,EAAKL,UAAUkE,SAAS1D,IACxBH,EAAKL,UAAUkB,OAAOV,EAE9B,CAUA4D,YAAY/F,EAAUgG,EAAQC,GAC1B,IAAIjE,EAAO,KAEX,IAAI3F,KAAK0D,MAAMC,GAAkB,OAS7B,MAAM3D,KAAK0D,MAAMC,GAAmB,QARV,iBAAf,EACPgC,EAAO5B,SAASG,cAAcP,GAEH,iBAAf,IACZgC,EAAOhC,GAOXgC,EAAKL,UAAUkE,SAASG,IACxBhE,EAAKL,UAAUkB,OAAOmD,GAGrBhE,EAAKL,UAAUkE,SAASI,IACzBjE,EAAKL,UAAUS,IAAI6D,EAE3B,CASAC,WAAWlG,EAAU2B,GACjB,IAAIK,EAAO,KAEX,IAAI3F,KAAK0D,MAAMC,GAAkB,OAS7B,MAAM3D,KAAK0D,MAAMC,GAAmB,QARV,iBAAf,EACPgC,EAAO5B,SAASG,cAAcP,GAEH,iBAAf,IACZgC,EAAOhC,GAOf2B,EAAUO,SAASC,IAEVH,EAAKL,UAAUkE,SAAS1D,IACzBH,EAAKL,UAAUS,IAAID,EACvB,GAER,CAQAgE,MAAMf,GACF,OAAOA,EAAKgB,mBAChB,CAQAC,MAAMjB,GACF,OAAOA,EAAKkB,mBAChB,CAQAC,SAASvG,EAAUwG,GACf,IAAIxE,EAAM/B,EAGN+B,EADqB,iBAAd,EACA5B,SAASC,iBAAiBL,GAG1BA,EAGX,MAAMyG,GAAQzE,EAAK0E,eAAiBtG,UAAUuG,YAS9C,OARIF,GAAQA,EAAKG,mBACb3G,EAASwG,EAAKG,iBAAiB5E,EAAM,MAAM6E,iBAAiBL,IAOzDvG,CACX,CAMA6G,eACI,OAAIhG,OAAOuD,YAAc0C,OAAOC,OAASlG,OAAOC,aAAegG,OAAOE,MAM1E,CAQAC,WAAWC,GACP,IAAK9K,KAAKyK,eAEN,OADeK,EAAKC,mBAAqBD,EAAKE,yBAA2BF,EAAKG,sBAAwBH,EAAKI,qBAC7FrL,KAAKiL,EAE3B,CAQAK,iBACI,MAAML,EAAO/G,SACb,GAAI/D,KAAKyK,eACL,OAAOK,EAAKK,kBAAoBL,EAAKM,wBAA0BN,EAAKO,uBAAyBP,EAAKQ,kBAE1G,ECvsBG,MAAMC,UAAmBtI,EAI5BlD,cAEImD,OACJ,CAUAsI,UAAU7H,EAAU6H,EAAY,GAAIC,GAAQ,GACxC,IAAI9F,EAAO,KAEX,IAAI3F,KAAK0D,MAAMC,GAAkB,OAS7B,MAAM3D,KAAK0D,MAAMC,GAAmB,QAGxC,MAX8B,iBAAf,EACPgC,EAAO5B,SAASG,cAAcP,GAEH,iBAAf,IACZgC,EAAOhC,GAOE,IAAb6H,GAGA7F,EAAKH,MAAMkG,eAAe,mBAEnB,GAcK,IAAIlD,SAAQ,CAACC,EAASC,KAElC1I,KAAK2L,SAAShG,GAGdA,EAAKH,MAAMoG,YAAY,iBAAkBJ,GAezC7F,EAAK2B,iBAAiB,gBAbtB,SAAsBuE,GAClBA,EAAMC,kBAEFL,GAEA9F,EAAKH,MAAMkG,eAAe,kBAG9BjD,EAAQ,oBAERC,EAAO,qBACX,GAEoD,CAAEqD,MAAM,GAAO,GAI3E,CAQAJ,SAAShI,GAEDA,EAASqI,QAAQR,WACjB7H,EAAS6B,MAAMoG,YAAY,iBAAkBjI,EAASqI,QAAQR,WAG9D7H,EAASqI,QAAQC,UACjBtI,EAAS6B,MAAMoG,YAAY,uBAAwBjI,EAASqI,QAAQC,UAGpEtI,EAASqI,QAAQlF,OACjBnD,EAAS6B,MAAMoG,YAAY,oBAAqBjI,EAASqI,QAAQlF,OAGjEnD,EAASqI,QAAQjF,OACjBpD,EAAS6B,MAAMoG,YAAY,oBAAqBjI,EAASqI,QAAQjF,OAGjEpD,EAASqI,QAAQE,UACjBvI,EAAS6B,MAAMoG,YAAY,uBAAwBjI,EAASqI,QAAQE,UAGpEvI,EAASqI,QAAQG,OACjBxI,EAAS6B,MAAMoG,YAAY,oBAAqBjI,EAASqI,QAAQG,OAGjExI,EAASqI,QAAQI,UACjBzI,EAAS6B,MAAMoG,YAAY,uBAAwBjI,EAASqI,QAAQI,UAGpEzI,EAASqI,QAAQK,OACjB1I,EAAS6B,MAAMoG,YAAY,oBAAqBjI,EAASqI,QAAQK,OAGjE1I,EAASqI,QAAQM,aACjB3I,EAAS6B,MAAMoG,YAAY,0BAA2BjI,EAASqI,QAAQM,aAGvE3I,EAASqI,QAAQO,QACjB5I,EAAS6B,MAAMoG,YAAY,qBAAsBjI,EAASqI,QAAQO,QAGlE5I,EAASqI,QAAQpB,QACjBjH,EAAS6B,MAAMoG,YAAY,qBAAsBjI,EAASqI,QAAQpB,QAGlEjH,EAASqI,QAAQrB,OACjBhH,EAAS6B,MAAMoG,YAAY,oBAAqBjI,EAASqI,QAAQrB,OAGjEhH,EAASqI,QAAQQ,YACjB7I,EAAS6B,MAAMoG,YAAY,yBAA0BjI,EAASqI,QAAQQ,YAGtE7I,EAASqI,QAAQS,WACjB9I,EAAS6B,MAAMoG,YAAY,wBAAyBjI,EAASqI,QAAQS,UAE7E,CASAC,SAAS/I,EAAUgJ,EAAM,UACrB,IAAIC,EAAQ,KAEZ,IAAI5M,KAAK0D,MAAMC,GAAkB,OAS7B,MAAM3D,KAAK0D,MAAMC,GAAmB,QARV,iBAAf,EACPiJ,EAAQ7I,SAASC,iBAAiBL,GAEP,iBAAf,IACZiJ,EAAQjJ,GAMhBiJ,EAAM/G,SAASF,IACX,IAAIrB,EAAYqB,EAAKqG,QAAQ1H,UACzBuI,EAAiBlH,EAAKqG,QAAQc,MAC9BC,EAAgBpH,EAAKqG,QAAQgB,KAE5B1I,IACDA,EAAY,GAGXuI,IACDA,EAAiB,UAGhBE,IACDA,EAAgB,WAGhB/M,KAAKoE,QAAQuB,EAAMgH,EAAKrI,GAExBtE,KAAKwL,UAAU7F,EAAMkH,GAIrB7M,KAAKwL,UAAU7F,EAAMoH,EACzB,GAER,CAUAE,UAAUtJ,EAAUsI,EAAW,IAAMlF,EAAQC,KACzC,IAAIrB,EAAO,KAEX,IAAI3F,KAAK0D,MAAMC,GAAkB,OAS7B,MAAM3D,KAAK0D,MAAMC,GAAmB,QARV,iBAAf,EACPgC,EAAO5B,SAASG,cAAcP,GAEH,iBAAf,IACZgC,EAAOhC,GAOX3D,KAAKoE,QAAQuB,EAAM,OAAQ,IAC3B3F,KAAK4G,MAAK,KACN,IAAI4E,EAAY7F,EAAKuH,aAAa,kBAElCvH,EAAKH,MAAMkG,eAAe,kBAC1B/F,EAAKwH,UAELxH,EAAKH,MAAMoG,YAAY,iBAAkBJ,EAAU,GACpDS,EAAUlF,EAAQ,EAE7B,CAWAqG,UAAUzJ,EAAUsF,EAAWoE,EAAS,SAAU/I,EAAY,GAC1D,IAAIH,EAAY,KACZmJ,EAAa,KAEjB,IAAItN,KAAK0D,MAAMC,GAAkB,OAS7B,MAAM3D,KAAK0D,MAAMC,GAAmB,QAGxC,GAX8B,iBAAf,EACPQ,EAAYJ,SAASC,iBAAiBL,GAEX,iBAAf,IACZQ,EAAYR,IAOhB3D,KAAK0D,MAAMuF,GAAmB,OAS9B,MAAMjJ,KAAK0D,MAAMuF,GAAoB,QARV,iBAAhB,EACPqE,EAAavJ,SAASC,iBAAiBiF,GAEX,iBAAhB,IACZqE,EAAarE,GAOrB9E,EAAU0B,SAASF,IACf,IAAIT,EAAMT,OAAO8I,QACb3C,EAASjF,EAAK6H,aACdC,EAAS9H,EAAKwH,UAAY7I,EAC1BiB,EAAKI,EAAKuH,aAAa,MAEvBhI,GAAOuI,GAAUvI,EAAMuI,EAAS7C,GAChC0C,EAAWzH,SAAS6H,IAChBA,EAAKpI,UAAUkB,OAAO6G,GACtBtJ,SAASG,cAAc,GAAG+E,WAAmB1D,KAAMD,UAAUS,IAAIsH,EAAO,GAEhF,GAER,EC9QJ,QCHO,cAAwB9B,EAiH3BxL,YAAY4N,EAA8BC,EAAiB,CAAC,GAKxD,GAHA1K,QA7GG,KAAA2K,cAAgC,YAChC,KAAAC,kBAAgC,OAChC,KAAAC,mBAAgC,QAChC,KAAAC,sBAAgC,WAChC,KAAAC,qBAAgC,UAChC,KAAAC,sBAAgC,WAChC,KAAAC,qBAAgC,UAChC,KAAAC,oBAAgC,SAChC,KAAAC,sBAAgC,WAChC,KAAAC,qBAAgC,UAChC,KAAAC,kBAAgC,OAChC,KAAAC,kBAAgC,OAChC,KAAAC,kBAAgC,OAChC,KAAAC,oBAAgC,SAG/B,KAAAf,UAA6B,KAC7B,KAAAgB,eAA6B,KAC7B,KAAAC,gBAA6B,KAC7B,KAAAC,kBAA6B,KAC7B,KAAAC,iBAA6B,KAC7B,KAAAC,cAA6B,KAC7B,KAAAC,cAA6B,KAC7B,KAAAC,cAA6B,KAG7B,KAAAC,WAA6B,EAC7B,KAAAC,WAA6B,KAC7B,KAAAC,UAA6B,KAC7B,KAAAC,YAA6B,EAC7B,KAAAxC,eAA6B7M,KAAKkC,gBAClC,KAAA6K,cAA6B/M,KAAKmC,iBAClC,KAAAmN,cAA6B,KAC7B,KAAAC,cAA6B,KAC7B,KAAAC,gBAA6B,EAC7B,KAAAC,cAA6B,EAC7B,KAAAC,SAA6B,EAC7B,KAAAC,WAA6B,EAC7B,KAAAC,aAA6B,EAG7B,KAAAC,aAA6B,EAC7B,KAAAC,YAA6B,EAC7B,KAAAC,YAA6B,EAC7B,KAAAC,QAA6B,IAC7B,KAAAC,aAA6B,EAC7B,KAAAC,YAA6B,EAC7B,KAAAC,aAA6B,EAC7B,KAAAC,SAA6B,EAC7B,KAAAzF,MAA6B,EAC7B,KAAAC,OAA6B,EAC7B,KAAAyF,eAA6B,OAC7B,KAAAC,YAA6B,KAC7B,KAAAC,eAA6B,EAC7B,KAAAC,eAA6B,EAG7B,KAAA5C,QAAe,CACnB,YAAoB5N,KAAK6P,YACzB,WAAoB7P,KAAK8P,WACzB,WAAoB9P,KAAK+P,WACzB,QAAoB/P,KAAKgQ,QACzB,YAAoBhQ,KAAKiQ,YACzB,WAAoBjQ,KAAKkQ,WACzB,YAAoBlQ,KAAKmQ,YACzB,QAAoBnQ,KAAKoQ,QACzB,OAAoB,EACpB,MAAoB,KACpB,OAAoB,KACpB,MAAoBpQ,KAAKqQ,eACzB,cAAoBrQ,KAAKuQ,cACzB,cAAoBvQ,KAAKwQ,cACzB,YAAoBxQ,KAAKsQ,YACzB,YAAoB,KACpB,aAAoB,KACpB,cAAoB,KACpB,WAAoB,KACpB,UAAoB,KACpB,eAAoB,KACpB,cAAoB,KACpB,eAAoB,KACpB,cAAoB,KACpB,aAAoB,KACpB,YAAoB,KACpB,iBAAoB,KACpB,gBAAoB,KACpB,iBAAoB,KACpB,gBAAoB,KACpB,aAAoB,KACpB,YAAoB,KACpB,iBAAoB,KACpB,gBAAoB,KACpB,iBAAoB,KACpB,gBAAoB,KACpB,gBAAoB,KACpB,aAAoB,KACpB,iBAAoB,KACpB,iBAAoB,OAehBtQ,KAAK0D,MAAMiK,GAAmB,OA6C9B,KAAM,2EA9BN,GAb0B,iBAAhB,EACN3N,KAAK2N,UAAY5J,SAASG,cAAcyJ,GAGb,iBAAhB,IACX3N,KAAK2N,UAAYA,GAIrB3N,KAAK2O,eAAkB3O,KAAK2N,UAAU3J,iBAAiB,IAAIhE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAK8N,qBACnG9N,KAAKkP,WAAkBlP,KAAK2O,eAAe1K,OAGpB,GAAnBjE,KAAKkP,WACL,KAAM,kBAIVlP,KAAK4O,gBAAkB5O,KAAK2N,UAAU3J,iBAAiB,IAAIhE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAK+N,sBAG/FH,IAAS5N,KAAK4N,QAAUA,GAGtB,gBAAiB5N,KAAK4N,UAAY5N,KAAK4N,QAAqB,YAAQ5N,KAAK6P,aACzE,eAAgB7P,KAAK4N,UAAa5N,KAAK4N,QAAoB,WAAS5N,KAAK8P,YACzE,eAAgB9P,KAAK4N,UAAa5N,KAAK4N,QAAoB,WAAS5N,KAAK+P,YACzE,YAAa/P,KAAK4N,UAAgB5N,KAAK4N,QAAiB,QAAY5N,KAAKgQ,SACzE,gBAAiBhQ,KAAK4N,UAAY5N,KAAK4N,QAAqB,YAAQ5N,KAAKiQ,aACzE,eAAgBjQ,KAAK4N,UAAa5N,KAAK4N,QAAoB,WAAS5N,KAAKkQ,YACzE,gBAAiBlQ,KAAK4N,UAAY5N,KAAK4N,QAAqB,YAAQ5N,KAAKmQ,aACzE,YAAanQ,KAAK4N,UAAgB5N,KAAK4N,QAAiB,QAAY5N,KAAKoQ,SACzE,kBAAmBpQ,KAAK4N,UAAU5N,KAAK4N,QAAuB,cAAM5N,KAAKuQ,eACzE,kBAAmBvQ,KAAK4N,UAAU5N,KAAK4N,QAAuB,cAAM5N,KAAKwQ,eACzE,UAAWxQ,KAAK4N,UAAkB5N,KAAK4N,QAAe,MAAc5N,KAAKqQ,gBACzE,gBAAiBrQ,KAAK4N,UAAY5N,KAAK4N,QAAqB,YAAQ5N,KAAKsQ,aAG/EtQ,KAAKyQ,OAOb,CAQQA,QAEJzQ,KAAK0Q,WAGL1Q,KAAK2Q,aAGL3Q,KAAK4Q,YAGL5Q,KAAK6Q,YAGL7Q,KAAK8Q,WAGL9Q,KAAK+Q,cAMJ,IAAI7J,EAAWC,aAAY,KAEpBnH,KAAK4P,cACL5P,KAAKgR,SAAS,GAGd5J,cAAcF,G,GAEnB,GACP,CAYQwJ,WAEJ,IAAK,IAAIzJ,EAAI,EAAGA,EAAIjH,KAAKkP,WAAYjI,IAAK,CAKtC,GAHAjH,KAAK2O,eAAe1H,GAAG+E,QAAQiF,MAAQhK,EAGnCjH,KAAK2O,eAAe1H,GAAG/C,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAK+N,sBAAuB,CACxG,MAAMmD,EAAYlR,KAAK2O,eAAe1H,GAAG/C,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAK+N,sBAGnG/N,KAAK6J,WAAWqH,EAAO,CAAClR,KAAKQ,cAAeR,KAAKQ,cAAgBR,KAAKC,OAASD,KAAKS,eAGpFT,KAAKmR,WAAWD,EAAO,SAGd,GAALjK,IAEAjH,KAAKmP,WAAanP,KAAK2O,eAAe,GAGtC3O,KAAKuJ,SAASvJ,KAAKmP,WAAYnP,KAAKwB,aAIxC0P,EAAM1L,MAAMoG,YAAY,cAAe,O,CAIvC5L,KAAK2O,eAAe1H,GAAGjD,iBAAiB,IAAIhE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKiO,wBAAwBhK,QACrFjE,KAAK2O,eAAe1H,GAAGjD,iBAAiB,IAAIhE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKiO,wBAGlGpI,SAASuL,IAEdpR,KAAK6J,WAAWuH,EAAS,CAACpR,KAAKQ,cAAeR,KAAKQ,cAAgBR,KAAKC,OAASD,KAAKS,eAGtFT,KAAKmR,WAAWC,GAGhBA,EAAQ5L,MAAMoG,YAAY,cAAe,OAAO,IAKpD5L,KAAK2O,eAAe1H,GAAGjD,iBAAiB,IAAIhE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKmO,wBAAwBlK,QACrFjE,KAAK2O,eAAe1H,GAAGjD,iBAAiB,IAAIhE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKmO,wBAGlGtI,SAASwL,IAEdrR,KAAK6J,WAAWwH,EAAS,CAACrR,KAAKQ,cAAeR,KAAKQ,cAAgBR,KAAKC,OAASD,KAAKS,eAGtF4Q,EAAQ7L,MAAMoG,YAAY,cAAe,OAAO,G,CAIhE,CAaQ0F,cAAcnJ,GAClB,IAAIoJ,EAAgB,GAChBC,EAAgB,GASpB,OANAA,EAAMrJ,EAAK5E,MAAM,KAGjBgO,EAAM,IAAMC,EAAIA,EAAIvN,OAAS,GAGtBsN,CACX,CAkBQJ,WAAWxL,EAAU8L,EAAS,MAClC,IAAIC,EAAYT,EAAe,EAAGU,EAAkB,GAAIC,EAAc,GAAIL,EAAc,GAAIM,EAAe,GAAIC,EAAmB,GAAIC,EAAgB,GAkBtJ,GAfY,SAARN,IAEAR,EAAQe,OAAOrM,EAAKsM,cAAcjG,QAAQiF,OAGtCtL,EAAKqG,QAAQkG,MAAKX,EAAMvR,KAAKsR,cAAc3L,EAAKqG,QAAQkG,MAGxDlS,KAAK4N,QAAuB,gBAAGkE,EAAW,cAI9C9R,KAAK4N,QAAqB,cAAG+D,EAAW,gCAGnB,SAArBhM,EAAKqG,QAAQ6F,KAAiB,CAG9B,IAAK,CAAC,QAAS,OAAQ,QAAS,QAAS,OAAQ,QAAS,OAAQ,QAAQM,SAASZ,GAC/E,KAAM,+IAIN5L,EAAKqG,QAAQ4F,MAAKA,EAAM,SAASjM,EAAKqG,QAAQ4F,QAGlDjM,EAAKQ,UAAY,aAAaR,EAAKqG,QAAQkG,OAAON,EAAID,KAGtDD,EAAQ/L,EAAKzB,cAAc,M,MAI1B,GAAyB,SAArByB,EAAKqG,QAAQ6F,KAAiB,CAOnC,GALyBA,EAAd,QAAPN,EAA4B,YAChB,SAAPA,EAAuB,aACA,IAG3BM,EACD,KAAM,4FAIN7R,KAAK4N,QAAuB,gBAC5BmE,EAAQ,eAKZpM,EAAKQ,UAAY,4BAA4B2L,EAASC,EAAMJ,kBAAyBhM,EAAKqG,QAAQkG,cAAcL,cAGhHH,EAAQ/L,EAAKzB,cAAc,Q,KAI1B,IAAyB,QAArByB,EAAKqG,QAAQ6F,KAWlB,KAAM,qCATFlM,EAAKqG,QAAQoG,OAAMzM,EAAKQ,UAAYR,EAAKqG,QAAQoG,MAGzBV,EAAxB/L,EAAK0M,kBAA2B1M,EAAK0M,kBACL1M,C,EASpC3F,KAAK4N,QAAgB,QAAK5N,KAAK4N,QAAqB,aAAK5N,KAAK4N,QAAsB,cAAK5N,KAAK4N,QAAuB,gBACjH5N,KAAK4N,QAAqB,cAAG8D,EAAMlM,MAAM8M,UAAY,QAIjD,SAARb,IAGyB,SAArB9L,EAAKqG,QAAQ6F,KACbH,EAAMa,OAAS,MAENvS,KAAK4N,QAAe,OAAK8D,EAAMc,aAAexS,KAAK2K,QAAO3K,KAAK2K,MAAQ+G,EAAMc,eAC7ExS,KAAK4N,QAAe,OAAK8D,EAAM1M,wBAAwB2F,MAAQ3K,KAAK2K,QAAO3K,KAAK2K,MAAQ+G,EAAM1M,wBAAwB2F,QAGtH3K,KAAK4N,QAAgB,QAAK8D,EAAM3M,aAAe/E,KAAK4K,SAAQ5K,KAAK4K,OAAS8G,EAAM3M,cAIjFkM,EAAQ,GAAKjR,KAAKkP,aAAYlP,KAAK4P,aAAc,EAAI,EAInC,SAArBjK,EAAKqG,QAAQ6F,KAClBH,EAAMe,iBAAmB,MAEhBzS,KAAK4N,QAAe,OAAK8D,EAAMzJ,YAAcjI,KAAK2K,QAAO3K,KAAK2K,MAAQ+G,EAAMzJ,cAC5EjI,KAAK4N,QAAe,OAAK8D,EAAM1M,wBAAwB2F,MAAQ3K,KAAK2K,QAAO3K,KAAK2K,MAAQ+G,EAAM1M,wBAAwB2F,QAGtH3K,KAAK4N,QAAgB,QAAK8D,EAAM3M,aAAe/E,KAAK4K,SAAQ5K,KAAK4K,OAAS8G,EAAM3M,cAIjFkM,EAAQ,GAAKjR,KAAKkP,aAAYlP,KAAK4P,aAAc,EAAI,EAK7D8C,YAAW,KAEHzB,EAAQ,GAAKjR,KAAKkP,aAAYlP,KAAK4P,aAAc,EAAI,GAC1D,IAGf,CAkBQe,aAIJ,GAAI3Q,KAAKkP,YAAc,EAAG,CAgBtB,GAdIlP,KAAK4N,QAAqB,cACrB5N,KAAK2N,UAAUzJ,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKqO,0BAC1ErO,KAAKsG,OAAO,MAAOtG,KAAK2N,UAAW,GAAI,CAAC3N,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKqO,yBAKpFrO,KAAK4N,QAAoB,aACpB5N,KAAK2N,UAAUzJ,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKsO,yBAC1EtO,KAAKsG,OAAO,MAAOtG,KAAK2N,UAAW,GAAI,CAAC3N,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKsO,wBAKpFtO,KAAK4N,QAAqB,YAAG,CAC7B,IAAK5N,KAAK2N,UAAUzJ,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKuO,qBAAsB,CAChG,MAAMoE,EAAyB,WAE/B3S,KAAKsG,OAAO,MAAOtG,KAAK2N,UAAWgF,EAAiB,CAAC3S,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKuO,mB,CAEjG,IAAKvO,KAAK2N,UAAUzJ,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKwO,qBAAsB,CAChG,MAAMmE,EAAyB,WAE/B3S,KAAKsG,OAAO,MAAOtG,KAAK2N,UAAWgF,EAAiB,CAAC3S,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKwO,mB,EAKrG,GAAIxO,KAAK4N,QAAiB,UACjB5N,KAAK2N,UAAUzJ,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKyO,qBAAsB,CAChG,IAAImE,EAAqB,GAEzB,IAAK,IAAI3L,EAAI,EAAGA,EAAIjH,KAAKkP,WAAYjI,IACjCjH,KAAK2O,eAAe1H,GAAG+E,QAAQiF,MAAQhK,EACvC2L,GAAe,mBAAmB3L,WAGtCjH,KAAKsG,OAAO,KAAMtG,KAAK2N,UAAWiF,EAAa,CAAC5S,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKyO,mB,CAKhGzO,KAAK6O,kBAAoB7O,KAAK2N,UAAUzJ,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKqO,yBAClGrO,KAAK8O,iBAAoB9O,KAAK2N,UAAUzJ,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKsO,wBAClGtO,KAAK+O,cAAoB/O,KAAK2N,UAAUzJ,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKuO,qBAClGvO,KAAKgP,cAAoBhP,KAAK2N,UAAUzJ,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKwO,qBAClGxO,KAAKiP,cAAoBjP,KAAK2N,UAAU3J,iBAAiB,IAAIhE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKyO,wBAGjGzO,KAAKiP,cAAchL,SAEnBjE,KAAKuJ,SAASvJ,KAAKiP,cAAc,GAAIjP,KAAKwB,YAG1CxB,KAAKoP,UAAYpP,KAAKiP,cAAc,G,CAQrB,GAAnBjP,KAAKkP,aAELlP,KAAK6O,kBAAkBrJ,MAAMqN,QAAU,OACvC7S,KAAK+O,cAAcvJ,MAAMqN,QAAc,OACvC7S,KAAKgP,cAAcxJ,MAAMqN,QAAc,OAGvC7S,KAAK2N,UAAUzJ,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKyO,qBAAqBjJ,MAAMqN,QAAU,QAOlH,IAAI3L,EAAWC,aAAY,KAEvB,GAAInH,KAAK4P,YAAa,CAKd5P,KAAK4N,QAAe,QAAG5N,KAAK2K,MAAQ3K,KAAK4N,QAAe,OAGxD5N,KAAK4N,QAAe,MAAG5N,KAAK2N,UAAUnI,MAAMmM,SAAW3R,KAAK4N,QAAe,MACpD5N,KAAK2N,UAAUnI,MAAMmM,SAAW3R,KAAK2K,MAAQ,KAMpE3K,KAAK4N,QAAgB,OAAG5N,KAAK4K,OAAS5K,KAAK4N,QAAgB,OACtD5N,KAAK4K,OAASnG,OAAOC,cAAa1E,KAAK4K,OAASnG,OAAOC,aAGhE,MAAMoO,EAAcrO,OAAOuD,WAGvB8K,GAAe9S,KAAKgD,cAAgBhD,KAAK4N,QAAuB,cAChE5N,KAAK2N,UAAUnI,MAAMoF,OAAS5K,KAAK4N,QAAuB,cAGrDkF,EAAc9S,KAAKgD,cAAgB8P,GAAe9S,KAAK+C,aAAe/C,KAAK4N,QAAsB,aACtG5N,KAAK2N,UAAUnI,MAAMoF,OAAS5K,KAAK4N,QAAsB,aAGpDkF,EAAc9S,KAAK+C,aAAe+P,GAAe9S,KAAK8C,YAAc9C,KAAK4N,QAAqB,YACnG5N,KAAK2N,UAAUnI,MAAMoF,OAAS5K,KAAK4N,QAAqB,YAIpD5N,KAAK4N,QAAgB,OAAG5N,KAAK2N,UAAUnI,MAAMoF,OAAS5K,KAAK4N,QAAgB,OACnD5N,KAAK2N,UAAUnI,MAAMoF,OAAS5K,KAAK4K,OAAS,KAI5ExD,cAAcF,E,IAEnB,IAcF,GARGlH,KAAK4N,QAAe,OAA8B,QAAzB5N,KAAK4N,QAAe,OAC7C5N,KAAKuJ,SAASvJ,KAAK2N,UAAW3N,KAAK6N,cAAgB7N,KAAKC,OAASD,KAAK4N,QAAe,OAOpF5N,KAAK4N,QAAqB,YAAG,CAC9B,IAAImF,EAGuCA,EAAR,QAA/B/S,KAAK4N,QAAqB,YAAyB,CAAC5N,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAK0O,qBAC/E,CAAC1O,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAK0O,oBAAqB1O,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAK0O,oBAAsB1O,KAAKC,OAASD,KAAK4N,QAAqB,aAGrL5N,KAAKsG,OAAO,MAAOtG,KAAK2N,UAAW,GAAIoF,E,CAqC3C,GA9BI/S,KAAK4N,QAAe,OACpB5N,KAAKuJ,SAASvJ,KAAK2N,UAAW3N,KAAK6N,cAAgB7N,KAAKC,OAASD,KAAKgC,YAQtEhC,KAAK4N,QAAyB,iBAE1B5N,KAAK8O,mBAEL9O,KAAK8O,iBAAiBtJ,MAAMwN,MAAS,QAGjC,CAAC,MAAO,UAAUb,SAASnS,KAAK4N,QAAyB,iBACzD5N,KAAK8O,iBAAiBtJ,MAAMyN,OAAS,SAEhC,CAAC,WAAY,OAAQ,cAAe,YAAa,QAAS,gBAAgBd,SAASnS,KAAK4N,QAAyB,mBACtH5N,KAAK8O,iBAAiBtJ,MAAMyN,OAAS,QAKzCjT,KAAKuJ,SAASvJ,KAAK8O,iBAAkB9O,KAAKiC,aAAejC,KAAKC,OAASD,KAAK4N,QAAyB,kBAKzG5N,KAAK4N,QAAsB,aAAG,CAC9B,MAAMsF,EAAOlT,KAAK2N,UAAUzJ,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKyO,qBAGlFyE,IAEAA,EAAK1N,MAAMwN,MAAS,QAGhB,CAAC,MAAO,UAAUb,SAASnS,KAAK4N,QAAsB,cACtDsF,EAAK1N,MAAMyN,OAAS,SAEf,CAAC,WAAY,OAAQ,cAAe,YAAa,QAAS,gBAAgBd,SAASnS,KAAK4N,QAAsB,gBACnHsF,EAAK1N,MAAMyN,OAAS,QAIxBjT,KAAKuJ,SAAS2J,EAAMlT,KAAKiC,aAAejC,KAAKC,OAASD,KAAK4N,QAAsB,c,CAKzF,GAAI5N,KAAK4N,QAA0B,iBAAG,CAClC,MAAMuF,EAAWnT,KAAK2N,UAAU3J,iBAAiB,IAAIhE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKkO,yBAGzFiF,EAASlP,QACTkP,EAAStN,SAASwL,IAEdA,EAAQ7L,MAAMwN,MAAS,QAGnB,CAAC,MAAO,UAAUb,SAASnS,KAAK4N,QAA0B,kBAC1DyD,EAAQ7L,MAAMyN,OAAS,SAElB,CAAC,WAAY,OAAQ,cAAe,YAAa,QAAS,gBAAgBd,SAASnS,KAAK4N,QAA0B,oBACvHyD,EAAQ7L,MAAMyN,OAAS,QAI3BjT,KAAKuJ,SAAS8H,EAASrR,KAAKiC,aAAejC,KAAKC,OAASD,KAAK4N,QAA0B,iBAAE,G,CAMtG,GAAI5N,KAAK4N,QAA0B,iBAAG,CAClC,MAAMwF,EAAWpT,KAAK2N,UAAU3J,iBAAiB,IAAIhE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKgO,yBAGzFoF,EAASnP,QACTmP,EAASvN,SAASuL,IAEdA,EAAQ5L,MAAMwN,MAAS,QAGnB,CAAC,MAAO,UAAUb,SAASnS,KAAK4N,QAA0B,kBAC1DwD,EAAQ5L,MAAMyN,OAAS,SAElB,CAAC,WAAY,OAAQ,cAAe,YAAa,QAAS,gBAAgBd,SAASnS,KAAK4N,QAA0B,oBACvHwD,EAAQ5L,MAAMyN,OAAS,QAI3BjT,KAAKuJ,SAAS6H,EAASpR,KAAKiC,aAAejC,KAAKC,OAASD,KAAK4N,QAA0B,iBAAE,G,CAK1G,CAUQgD,YACA5Q,KAAK4N,QAAqB,cAC1B5N,KAAK+O,cAAcsE,QAAU,KAEzB,IAAIpC,EAAejR,KAAKqP,YAAc,EAGlC4B,EAAQ,IAAGA,EAAQjR,KAAKkP,WAAa,GAGzClP,KAAKgR,SAASC,EAAO,WAAW,EAG5C,CAUQJ,YACA7Q,KAAK4N,QAAqB,cAC1B5N,KAAKgP,cAAcqE,QAAU,KAEzB,IAAIpC,EAAejR,KAAKqP,YAAc,EAGlC4B,GAASjR,KAAKkP,aAAY+B,EAAQ,GAGtCjR,KAAKgR,SAASC,EAAO,OAAO,EAGxC,CAUQH,WACA9Q,KAAK4N,QAAiB,SACtB5N,KAAKiP,cAAcpJ,SAASyN,IACxBA,EAAID,QAAU,KAEV,IAAIpC,EAAee,OAAOsB,EAAItH,QAAQiF,OAGlCA,GAASjR,KAAKqP,aAAarP,KAAKgR,SAASC,EAAM,CACtD,GAGb,CAYQsC,UAAUvD,EAAiB,GAC/B,GAAIhQ,KAAK4N,QAAoB,WAAG,CAC5B,IAAI4F,EAGSA,EAATxD,GACkBhQ,KAAK4N,QAAiB,QAG5C5N,KAAKsP,cAAgBnI,aAAY,KAExBnH,KAAKwP,gBAAgBxP,KAAKgP,cAAcyE,OAAO,GAErDD,E,CAEX,CAQQE,cAEJ1T,KAAK2N,UAAUgG,YAAc,KAEzB3T,KAAKwP,gBAAiB,EAGlBxP,KAAKsP,eAAelI,cAAcpH,KAAKsP,cAAc,EAI7DtP,KAAK2N,UAAUiG,aAAe,KAE1B5T,KAAKwP,gBAAiB,EAGlBxP,KAAKsP,eAAelI,cAAcpH,KAAKsP,eAG3CtP,KAAKuT,UAAUvT,KAAKyP,eAGpBzP,KAAK6T,YAAY,CAEzB,CAWQC,eAEJrP,OAAOsP,OAAS,KAGR/T,KAAKmP,WAAWjL,cAAc,UAAUlE,KAAKmP,WAAWjL,cAAc,SAAS8P,QAG/EhU,KAAKmP,WAAWjL,cAAc,UAAUlE,KAAKmP,WAAWjL,cAAc,SAAS8P,QAGnFhU,KAAKwP,gBAAiB,EAGlBxP,KAAKsP,eAAelI,cAAcpH,KAAKsP,cAAc,EAI7D7K,OAAOwP,QAAU,KAETjU,KAAK4N,QAAuB,gBAExB5N,KAAKmP,WAAWjL,cAAc,UAC9BlE,KAAKmP,WAAWjL,cAAc,SAASgQ,OAIvClU,KAAKmP,WAAWjL,cAAc,UAC9BlE,KAAKmP,WAAWjL,cAAc,SAASgQ,QAK/ClU,KAAKwP,gBAAiB,EAGlBxP,KAAKsP,eAAelI,cAAcpH,KAAKsP,eAG3CtP,KAAKuT,UAAUvT,KAAKyP,eAGpBzP,KAAK6T,YAAY,EAIrBpP,OAAO0P,SAAW,KAEdnU,KAAK4K,OAAS,EAGd5K,KAAK4O,gBAAgB/I,SAASqL,IAE1B,GAAIA,EAAMmB,kBAAmB,CACzB,MAAMX,EAAQR,EAAMmB,mBAGfrS,KAAK4N,QAAgB,QAAK8D,EAAM3M,aAAe/E,KAAK4K,SAAQ5K,KAAK4K,OAAS8G,EAAM3M,eAChF/E,KAAK4N,QAAgB,QAAK5N,KAAK4K,OAASnG,OAAOC,cAAa1E,KAAK4K,OAASnG,OAAOC,Y,MAMjF1E,KAAK4N,QAAgB,QAAKsD,EAAMlM,wBAAwB4F,OAAS5K,KAAK4K,SAAQ5K,KAAK4K,OAASsG,EAAMlM,wBAAwB4F,O,IASnI5K,KAAK4N,QAAgB,SAAG5N,KAAK4K,OAAS5K,KAAK4N,QAAgB,QAG/D,MAAMkF,EAAcrO,OAAOuD,WAGvB8K,GAAe9S,KAAKgD,cAAgBhD,KAAK4N,QAAuB,cAChE5N,KAAK2N,UAAUnI,MAAMoF,OAAS5K,KAAK4N,QAAuB,cAGrDkF,EAAc9S,KAAKgD,cAAgB8P,GAAe9S,KAAK+C,aAAe/C,KAAK4N,QAAsB,aACtG5N,KAAK2N,UAAUnI,MAAMoF,OAAS5K,KAAK4N,QAAsB,aAGpDkF,EAAc9S,KAAK+C,aAAe+P,GAAe9S,KAAK8C,YAAc9C,KAAK4N,QAAqB,YACnG5N,KAAK2N,UAAUnI,MAAMoF,OAAS5K,KAAK4N,QAAqB,YAIpD5N,KAAK4N,QAAgB,OAAG5N,KAAK2N,UAAUnI,MAAMoF,OAAS5K,KAAK4N,QAAgB,OACnD5N,KAAK2N,UAAUnI,MAAMoF,OAAS5K,KAAK4K,OAAS,I,CAGpF,CAQQmG,cACA/Q,KAAK4N,QAAoB,aAErB5N,KAAK4N,QAAoB,YAEzB5N,KAAK0T,cAIT1T,KAAK8T,eAEb,CAUQD,aAIJ,GAFI7T,KAAKuP,eAAenI,cAAcpH,KAAKuP,eAEvCvP,KAAK4N,QAAoB,aAEpB5N,KAAKwP,eAAgB,CACtB,IAAI4E,EAGApU,KAAKyP,eAAiB,IAAGzP,KAAKyP,cAAgBzP,KAAK4N,QAAiB,SAGxE5N,KAAKuP,cAAgBpI,aAAY,KAE7BnH,KAAKyP,eAAiB,GAGtB2E,EAAgB,IAAQpU,KAAKyP,cAAgBzP,KAAK4N,QAAiB,QAAK,IAGpE5N,KAAK4N,QAAqB,cAAG5N,KAAK6O,kBAAkBrJ,MAAMmF,MAAQyJ,EAAgB,MAGlFpU,KAAKwP,gBAAkBxP,KAAKyP,eAAiB,KAC7CrI,cAAcpH,KAAKuP,eAEfvP,KAAKyP,eAAiB,GAAKzP,KAAK4N,QAAqB,cAAG5N,KAAK6O,kBAAkBrJ,MAAMmF,MAAQ,M,GAGtG,G,CAGf,CAoBQqG,SAASC,EAAcQ,EAAmB,MAE9C,IAAKzR,KAAK0P,QAAS,CAoBf,IAAI2E,EAAWnD,EAAWkC,EAAgBD,EACtCmB,EAAuBC,EAAyBC,EAChDC,EApBJzU,KAAKyP,cAAgB,EAGjBzP,KAAKuP,eAAenI,cAAcpH,KAAKuP,eAGvCvP,KAAK4N,QAAqB,cAAG5N,KAAK6O,kBAAkBrJ,MAAMmF,MAAQ,MAGtE3K,KAAK0P,SAAU,EAGX1P,KAAKsP,eAAelI,cAAcpH,KAAKsP,eAGvCtP,KAAK4N,QAAqB,cAAG5N,KAAK6O,kBAAkBrJ,MAAMmF,MAAQ,MAQlC8J,EAAhChD,IACKR,GAASjR,KAAKqP,YAAyB,OACA,YAM3CrP,KAAK2P,YAEN0E,EAAWrU,KAAK2O,eAAe3O,KAAKqP,aACpC6B,EAAWmD,EAAMnQ,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAK+N,sBAC3EqF,EAAWiB,EAAMrQ,iBAAiB,IAAIhE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKiO,wBAC9EkF,EAAWkB,EAAMrQ,iBAAiB,IAAIhE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKmO,wBAG9EnO,KAAKmP,WAAanP,KAAK2N,UAAUzJ,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAK8N,qBAAqB9N,KAAKwB,cACrHxB,KAAKoP,UAAapP,KAAK2N,UAAUzJ,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKyO,wBAAwBzO,KAAKwB,cAGxHxB,KAAKyJ,YAAYzJ,KAAKmP,WAAYnP,KAAKwB,YAGnCxB,KAAKoP,WAELpP,KAAKyJ,YAAYzJ,KAAKoP,UAAWpP,KAAKwB,YAItC0P,IAGIA,EAAMhN,cAAc,UAAUgN,EAAMhN,cAAc,SAAS8P,QAG3D9C,EAAMhN,cAAc,UAAUgN,EAAMhN,cAAc,SAAS8P,QAGIM,EAA/DpD,EAAMlF,QAAQgB,KAAkEkE,EAAMlF,QAAQgB,KACzFkE,EAAMlF,QAAQ0I,UAAyB,YAAbD,EAAiDvD,EAAMlF,QAAQ0I,SACzFxD,EAAMlF,QAAQ2I,UAAyB,QAAbF,EAAiDvD,EAAMlF,QAAQ2I,SACzF3U,KAAK4N,QAAmB,UAAmD5N,KAAK4N,QAAmB,UACnG5N,KAAK4N,QAAuB,eAAkB,YAAb6G,EAA0CzU,KAAK4N,QAAuB,cACvG5N,KAAK4N,QAAuB,eAAkB,QAAb6G,EAA0CzU,KAAK4N,QAAuB,cAC5B5N,KAAK+M,cAGzF/M,KAAKwL,UAAU0F,EAAOoD,IAItBlB,EAASnP,QACTmP,EAASvN,SAASuL,IAEuDmD,EAAjEnD,EAAQpF,QAAQgB,KAAoEoE,EAAQpF,QAAQgB,KAC/FoE,EAAQpF,QAAQ0I,UAAyB,YAAbD,EAAmDrD,EAAQpF,QAAQ0I,SAC/FtD,EAAQpF,QAAQ2I,UAAyB,QAAbF,EAAmDrD,EAAQpF,QAAQ2I,SAC/F3U,KAAK4N,QAAqB,YAAqD5N,KAAK4N,QAAqB,YACzG5N,KAAK4N,QAAyB,iBAAkB,YAAb6G,EAA4CzU,KAAK4N,QAAyB,gBAC7G5N,KAAK4N,QAAyB,iBAAkB,QAAb6G,EAA4CzU,KAAK4N,QAAyB,gBAC9B5N,KAAK+M,cAG7F/M,KAAKwL,UAAU4F,EAASmD,EAAiB,IAK7CpB,EAASlP,QACTkP,EAAStN,SAASwL,IAEuDmD,EAAjEnD,EAAQrF,QAAQgB,KAAoEqE,EAAQrF,QAAQgB,KAC/FqE,EAAQrF,QAAQ0I,UAAyB,YAAbD,EAAmDpD,EAAQrF,QAAQ0I,SAC/FrD,EAAQrF,QAAQ2I,UAAyB,QAAbF,EAAmDpD,EAAQrF,QAAQ2I,SAC/F3U,KAAK4N,QAAqB,YAAqD5N,KAAK4N,QAAqB,YACzG5N,KAAK4N,QAAyB,iBAAkB,YAAb6G,EAA4CzU,KAAK4N,QAAyB,gBAC7G5N,KAAK4N,QAAyB,iBAAkB,QAAb6G,EAA4CzU,KAAK4N,QAAyB,gBAC9B5N,KAAK+M,cAG7F/M,KAAKwL,UAAU6F,EAASmD,EAAiB,KAUjDxU,KAAK2P,YAAW3P,KAAK2P,WAAY,GAGrC0E,EAAWrU,KAAK2O,eAAesC,GAC/BC,EAAWmD,EAAMnQ,cAAc,IAAIlE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAK+N,sBAC3EqF,EAAWiB,EAAMrQ,iBAAiB,IAAIhE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKiO,wBAC9EkF,EAAWkB,EAAMrQ,iBAAiB,IAAIhE,KAAK6N,cAAgB7N,KAAKE,OAASF,KAAKmO,wBAG9EnO,KAAKmP,WAAakF,EAGlBrU,KAAKuJ,SAAS8K,EAAOrU,KAAKwB,YAG1BxB,KAAKiP,cAAcpJ,SAASyN,IACpBtB,OAAOsB,EAAItH,QAAQiF,QAAUA,IAC7BjR,KAAKuJ,SAAS+J,EAAKtT,KAAKwB,YAGxBxB,KAAKoP,UAAYkE,E,IAKrBpC,IAEIlR,KAAK4N,QAAuB,gBAExBsD,EAAMhN,cAAc,WACpBgN,EAAMhN,cAAc,SAAS0Q,OAC7B1D,EAAMhN,cAAc,SAASgQ,QAI7BhD,EAAMhN,cAAc,WACpBgN,EAAMhN,cAAc,SAAS0Q,OAC7B1D,EAAMhN,cAAc,SAASgQ,SAK+BI,EAAhEpD,EAAMlF,QAAQc,MAAmEoE,EAAMlF,QAAQc,MAC1FoE,EAAMlF,QAAQ6I,WAA0B,YAAbJ,EAAiDvD,EAAMlF,QAAQ6I,UAC1F3D,EAAMlF,QAAQ8I,WAA0B,QAAbL,EAAiDvD,EAAMlF,QAAQ8I,UAC1F9U,KAAK4N,QAAoB,WAAmD5N,KAAK4N,QAAoB,WACrG5N,KAAK4N,QAAwB,gBAAkB,YAAb6G,EAA0CzU,KAAK4N,QAAwB,eACzG5N,KAAK4N,QAAwB,gBAAkB,QAAb6G,EAA0CzU,KAAK4N,QAAwB,eAC7B5N,KAAK6M,eAG1F7M,KAAKwL,UAAU0F,EAAOoD,GAAgBzL,MAAK,KAEnC7I,KAAKuP,eAAenI,cAAcpH,KAAKuP,eAGvCvP,KAAKsP,eAAelI,cAAcpH,KAAKsP,eAG3CtP,KAAKuT,YAGLvT,KAAK6T,aAGL7T,KAAK0P,SAAU,CAAK,KAKxB0D,EAASnP,QACTmP,EAASvN,SAASuL,IAEwDmD,EAAlEnD,EAAQpF,QAAQc,MAAqEsE,EAAQpF,QAAQc,MAChGsE,EAAQpF,QAAQ6I,WAA0B,YAAbJ,EAAmDrD,EAAQpF,QAAQ6I,UAChGzD,EAAQpF,QAAQ8I,WAA0B,QAAbL,EAAmDrD,EAAQpF,QAAQ8I,UAChG9U,KAAK4N,QAAsB,aAAqD5N,KAAK4N,QAAsB,aAC3G5N,KAAK4N,QAA0B,kBAAkB,YAAb6G,EAA4CzU,KAAK4N,QAA0B,iBAC/G5N,KAAK4N,QAA0B,kBAAkB,QAAb6G,EAA4CzU,KAAK4N,QAA0B,iBAC/B5N,KAAK6M,eAG9F7M,KAAKwL,UAAU4F,EAASmD,EAAiB,IAK7CpB,EAASlP,QACTkP,EAAStN,SAASwL,IAEwDmD,EAAlEnD,EAAQrF,QAAQc,MAAqEuE,EAAQrF,QAAQc,MAChGuE,EAAQrF,QAAQ6I,WAA0B,YAAbJ,EAAmDpD,EAAQrF,QAAQ6I,UAChGxD,EAAQrF,QAAQ8I,WAA0B,QAAbL,EAAmDpD,EAAQrF,QAAQ8I,UAChG9U,KAAK4N,QAAsB,aAAqD5N,KAAK4N,QAAsB,aAC3G5N,KAAK4N,QAA0B,kBAAkB,YAAb6G,EAA4CzU,KAAK4N,QAA0B,iBAC/G5N,KAAK4N,QAA0B,kBAAkB,QAAb6G,EAA4CzU,KAAK4N,QAA0B,iBAC/B5N,KAAK6M,eAG9F7M,KAAKwL,UAAU6F,EAASmD,EAAiB,IAK7CxU,KAAK4N,QAAoB,aAAG5N,KAAK8O,iBAAiB3I,UAAY,GAAG6L,OAAOqC,EAAMrI,QAAQiF,OAAS,KAAKjR,KAAKkP,cAG7GlP,KAAKqP,YAAc4B,C,CAE3B,G","sources":["webpack://Slideshow/webpack/universalModuleDefinition","webpack://Slideshow/webpack/bootstrap","webpack://Slideshow/webpack/runtime/define property getters","webpack://Slideshow/webpack/runtime/hasOwnProperty shorthand","webpack://Slideshow/./node_modules/polaris-core/dist/js/modules/Config.js","webpack://Slideshow/./node_modules/polaris-core/dist/js/modules/Helpers.js","webpack://Slideshow/./node_modules/polaris-core/dist/js/modules/Animations.js","webpack://Slideshow/./src/ts/main.ts","webpack://Slideshow/./src/ts/modules/Slideshow.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Slideshow\"] = factory();\n\telse\n\t\troot[\"Slideshow\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\r\n * @desc Used for the configuration of Polaris JS library\r\n */\r\nexport class Config {\r\n    constructor() {\r\n        this.modSep = \"-\"; // Modifier Separator\r\n        this.chiSep = \"--\"; // Child Separator\r\n        this.sibSep = \"_\"; // Sibling Separator\r\n        this.parSep = \"__\"; // Parent Separator\r\n        this.nameDoc = \"doc\"; // Name key for document component\r\n        this.nameLight = \"light\"; // Name key for light color\r\n        this.nameDark = \"dark\"; // Name key for dark color\r\n        this.nameAnimation = \"animation\"; // Name key for animation component\r\n        this.nameAnimated = \"animated\"; // Name key for animation-animated\r\n        this.nameRipple = \"ripple\"; // Name key for ripple component\r\n        this.nameAlert = \"alert\"; // Name key for alert component\r\n        this.nameMessages = \"msg\"; // Name key for msg component\r\n        this.nameBackdrop = \"backdrop\"; // Name key for backdrop component\r\n        this.namePopup = \"popup\"; // Name key for popup component\r\n        this.nameMenu = \"menu\"; // Name key for menu component\r\n        this.nameModal = \"modal\"; // Name key for modal component\r\n        this.nameBlueprint = \"blueprint\"; // Name key for component's blueprint\r\n        this.nameContainer = \"container\"; // Name key for container\r\n        this.nameControl = \"control\"; // Name key for control\r\n        this.nameIcon = \"icon\"; // Name key for icon\r\n        this.nameContent = \"content\"; // Name key for content\r\n        this.nameClose = \"close\"; // Name key for close\r\n        this.nameClick = \"click\"; // Name key for click\r\n        this.nameActive = \"active\"; // Name key for active\r\n        this.nameVoid = \"void\"; // Name key for active\r\n        this.nameOpen = \"open\"; // Name key for open inffix\r\n        this.nameHeader = \"header\"; // Name key for header\r\n        this.nameBody = \"body\"; // Name key for body\r\n        this.nameFooter = \"footer\"; // Name key for footer\r\n        this.nameWidth = \"w\"; // Name key for css width classes\r\n        this.nameHeight = \"h\"; // Name key for css height classes\r\n        this.nameRadius = \"round\"; // Name key for border-radius & component roundness\r\n        this.namePosition = \"position\"; // Name key for position classes\r\n        this.fadeInAnimation = \"fadeIn\"; // fadeIn animation\r\n        this.fadeOutAnimation = \"fadeOut\"; // fadeOut animation\r\n        this.hideYAnimation = \"hideY\"; // hideY animation\r\n        this.rippleAnimation = \"ripple\"; // ripple animation\r\n        this.rippleAutoAnimation = \"rippleAuto\"; // rippleAuto animation\r\n        this.piAlertCircle = \"pi-alert-circle\"; // Polaris Icon: alert-circle\r\n        this.piAlertTri = \"pi-alert-triangle\"; // Polaris Icon: alert-triangle\r\n        this.piAlertTick = \"pi-alert-tick\"; // Polaris Icon: alert-tick\r\n        this.piClose = \"pi-close\"; // Polaris Icon: close\r\n        this.hideTimeout = 8000; // Default hide timeout (in miliseconds)\r\n        this.alertPosition = \"bottom\"; // Alert default position\r\n        this.polarisSizes = ['xs', 'sm', 'md', 'lg', 'xl']; // Polaris standard sizes\r\n        this.phoneWidth = 0; // Smartphone min-width\r\n        this.tabletWidth = 768; // Tablet min-width\r\n        this.desktopWidth = 1280; // Desktop min-width\r\n    }\r\n}\r\n//# sourceMappingURL=Config.js.map","/**\r\n * Import the parent Class\r\n */\r\nimport { Config } from \"./Config\";\r\n/**\r\n * @desc Polaris JS helper methods\r\n */\r\nexport class Helpers extends Config {\r\n    /**\r\n     * @desc Constructor method\r\n     */\r\n    constructor() {\r\n        // Inherit the parent class\r\n        super();\r\n        /**\r\n         * @desc For removeing character(s) in a string before some character(s)\r\n         *\r\n         * @param {string}  str    -- The string to format\r\n         * @param {string}  find   -- The character(s) to find\r\n         * @param {boolean} strict -- Remove the character itself?\r\n         *\r\n         * @return {string | undefined}\r\n         */\r\n        this.removeBefore = (str, find, strict = false) => {\r\n            if (strict) {\r\n                return str.split(find).pop();\r\n            }\r\n            else {\r\n                return find + str.split(find).pop();\r\n            }\r\n        };\r\n        /**\r\n         * @desc For removeing character(s) in a string after some character(s)\r\n         *\r\n         * @param {string}  str    -- The string to format\r\n         * @param {string}  find   -- The character(s) to find\r\n         * @param {boolean} strict -- Remove the character itself?\r\n         *\r\n         * @return {string}\r\n         */\r\n        this.removeAfter = (str, find, strict = false) => {\r\n            if (strict) {\r\n                return str.split(find)[0];\r\n            }\r\n            else {\r\n                return str.split(find)[0] + find;\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @desc Checks a selector for type & existence\r\n     *\r\n     * @param {string | HTMLElement} selector -- The selector name (object)\r\n     *\r\n     * @return {object}\r\n     */\r\n    exist(selector = null) {\r\n        // Default variables\r\n        let result = {};\r\n        // Set the default result response\r\n        result = {\r\n            status: true,\r\n            message: `Passed!`\r\n        };\r\n        // Empty or null selector\r\n        if (!selector) {\r\n            result = {\r\n                status: false,\r\n                message: `The \"selector\" parameter cannot be empty or null.`\r\n            };\r\n        }\r\n        // String type\r\n        else if (typeof (selector) === \"string\") {\r\n            if (document.querySelectorAll(selector).length == 0) {\r\n                result = {\r\n                    status: false,\r\n                    message: `The selector \"${selector}\" not exists on the window object!`\r\n                };\r\n            }\r\n        }\r\n        // Object type\r\n        else if (typeof (selector) === \"object\") {\r\n            if (selector.length == 0) {\r\n                result = {\r\n                    status: false,\r\n                    message: `The selector object not exists on the window object!`\r\n                };\r\n            }\r\n        }\r\n        // Return the result\r\n        return result;\r\n    }\r\n    /**\r\n     * @desc Produces the querySelector object\r\n     *\r\n     * @param {string} selector -- The selector name\r\n     *\r\n     * @return {object}\r\n     */\r\n    selector(selector) {\r\n        // Check selector\r\n        if (typeof (selector) !== \"string\") {\r\n            throw `The selector must be of type \"string\".`;\r\n        }\r\n        else if (this.exist(selector)['status']) {\r\n            // Return the result\r\n            return document.querySelector(selector);\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n    }\r\n    /**\r\n     * @desc Produces the querySelectorAll object\r\n     *\r\n     * @param {string} selector -- The selector name\r\n     *\r\n     * @return {object}\r\n     */\r\n    selectors(selector) {\r\n        // Check selector\r\n        if (typeof (selector) !== \"string\") {\r\n            throw `The selector must be of type \"string\".`;\r\n        }\r\n        else if (this.exist(selector)['status']) {\r\n            // Return the result\r\n            return document.querySelectorAll(selector);\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n    }\r\n    /**\r\n     * @desc Checks if an element is visible on the screen\r\n     *\r\n     * @param {string | object} selector  -- The selector name (object)\r\n     * @param {string}          from      -- Visible from (top, bottom, or both)\r\n     * @param {number}          tolerance -- The scroll tolerance\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    visible(selector, from = 'both', tolerance = 0) {\r\n        let result = false;\r\n        let rect = null;\r\n        let windowHeight = window.innerHeight;\r\n        let viewHeight = Math.max(document.documentElement.clientHeight, windowHeight);\r\n        // Check the selector\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                rect = document.querySelector(selector);\r\n                rect = rect.getBoundingClientRect();\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                rect = selector.getBoundingClientRect();\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Scroll top & bottom\r\n        if (from == 'both') {\r\n            result = rect.bottom >= tolerance && rect.top < viewHeight - tolerance;\r\n        }\r\n        // Scroll top\r\n        else if (from == 'top') {\r\n            result = rect.top < viewHeight - tolerance;\r\n        }\r\n        // Scroll bottom\r\n        else if (from == 'bottom') {\r\n            result = rect.bottom >= tolerance;\r\n        }\r\n        // Return result\r\n        return result;\r\n    }\r\n    /**\r\n     * @desc Prepends an HTML element to a parent element\r\n     *\r\n     * @param {string}          selector  -- The selector name\r\n     * @param {string | object} parent    -- The selector's parent name (object)\r\n     * @param {string}          content   -- The selector's content\r\n     * @param {object}          classList -- The selector's class list ['class-1', 'class-2', ...]\r\n     * @param {string}          id        -- The selector's id name\r\n     * @param {string}          style     -- The selector's inline CSS styles\r\n     * @param {object}          attrs     -- The selector's attributes\r\n     *\r\n     * @return {HTMLElement | boolean}\r\n     */\r\n    prepend(selector, parent, content, classList = [], id = \"\", style = \"\", attrs = {}) {\r\n        let parentNode = null;\r\n        // Check the selector\r\n        if (typeof (selector) !== \"string\") {\r\n            throw `The selector must be of type \"string\".`;\r\n        }\r\n        // Check the parent\r\n        if (this.exist(parent)['status']) {\r\n            if (typeof (parent) === \"string\") {\r\n                parentNode = document.querySelector(parent);\r\n            }\r\n            else if (typeof (parent) === \"object\") {\r\n                parentNode = parent;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(parent)['message'];\r\n        }\r\n        // Create the node\r\n        const node = document.createElement(selector);\r\n        // Add class list\r\n        classList.forEach((cls) => {\r\n            node.classList.add(cls);\r\n        });\r\n        // Add id\r\n        if (id) {\r\n            node.setAttribute(\"id\", id);\r\n        }\r\n        // Add style\r\n        if (style) {\r\n            node.style.cssText = style;\r\n        }\r\n        // Add attributes\r\n        if (attrs) {\r\n            for (let attr in attrs) {\r\n                node.setAttribute(attr, attrs[attr]);\r\n            }\r\n        }\r\n        // Prepend the node\r\n        node.innerHTML = content;\r\n        parentNode.insertBefore(node, parentNode.firstChild);\r\n        // Return the node\r\n        return node;\r\n    }\r\n    /**\r\n     * @desc Appends an HTML element to a parent element\r\n     *\r\n     * @param {string}          selector  -- The selector name\r\n     * @param {string | object} parent    -- The selector's parent name (object)\r\n     * @param {string}          content   -- The selector's content\r\n     * @param {object}          classList -- The selector's class list ['class-1', 'class-2', ...]\r\n     * @param {string}          id        -- The selector's id name\r\n     * @param {string}          style     -- The selector's inline CSS styles\r\n     * @param {object}          attrs     -- The selector's attributes\r\n     *\r\n     * @return {HTMLElement | boolean}\r\n     */\r\n    append(selector, parent, content, classList = [], id = \"\", style = \"\", attrs = {}) {\r\n        let parentNode = null;\r\n        // Check the selector\r\n        if (typeof (selector) !== \"string\") {\r\n            throw `The selector must be of type \"string\".`;\r\n        }\r\n        // Check the parent\r\n        if (this.exist(parent)['status']) {\r\n            if (typeof (parent) === \"string\") {\r\n                parentNode = document.querySelector(parent);\r\n            }\r\n            else if (typeof (parent) === \"object\") {\r\n                parentNode = parent;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(parent)['message'];\r\n        }\r\n        // Create the node\r\n        const node = document.createElement(selector);\r\n        // Add class list\r\n        classList.forEach((cls) => {\r\n            node.classList.add(cls);\r\n        });\r\n        // Add id\r\n        if (id) {\r\n            node.setAttribute(\"id\", id);\r\n        }\r\n        // Add style\r\n        if (style) {\r\n            node.style.cssText = style;\r\n        }\r\n        // Add attributes\r\n        if (attrs) {\r\n            for (let attr in attrs) {\r\n                node.setAttribute(attr, attrs[attr]);\r\n            }\r\n        }\r\n        // Append the node\r\n        node.innerHTML = content;\r\n        parentNode.appendChild(node);\r\n        // Return the node\r\n        return node;\r\n    }\r\n    /**\r\n     * @desc Removes an HTML element from the DOM\r\n     *\r\n     * @param {string | object} selector -- The selector name (object)\r\n     *\r\n     * @return {void | boolean}\r\n     */\r\n    remove(selector) {\r\n        let node = null;\r\n        // Check the selectors\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Remove the node\r\n        node.remove();\r\n    }\r\n    /**\r\n     * @desc For writing the whole document\r\n     *\r\n     * @param {string} content -- The document content\r\n     *\r\n     * @return {void}\r\n     */\r\n    write(content = \"\") {\r\n        javascript: document.open('text/html');\r\n        document.write(content);\r\n        document.close();\r\n    }\r\n    /**\r\n     * @desc Loops a function for a couple of times\r\n     *\r\n     * @param {function} fn    -- The function that needed to be looped\r\n     * @param {number}   delay -- The time delay for each iteration\r\n     * @param {number}   count -- The loop count\r\n     *\r\n     * @return {void}\r\n     */\r\n    loop(fn, delay = 1000, count = Infinity) {\r\n        let i = 0;\r\n        let interval = setInterval(() => {\r\n            // Exit the loop\r\n            if (i == count || count <= 0) {\r\n                clearInterval(interval);\r\n                return false;\r\n            }\r\n            // Invoke the function\r\n            fn();\r\n            i++;\r\n        }, delay);\r\n    }\r\n    /**\r\n     * @desc Excecutes a function after document fully loaded\r\n     *\r\n     * @param {function} fn -- The callback function\r\n     *\r\n     * @return {void}\r\n     */\r\n    loaded(fn) {\r\n        return document.addEventListener('DOMContentLoaded', () => {\r\n            fn();\r\n        });\r\n    }\r\n    /**\r\n     * @desc For escaping Regular Expression search characters\r\n     *\r\n     * @param {string} str -- The string to format\r\n     *\r\n     * @return {string}\r\n     */\r\n    escape(str) {\r\n        return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n    }\r\n    /**\r\n     * @desc For replacing character(s) in a string\r\n     *\r\n     * @param {string} str     -- The string to format\r\n     * @param {string} find    -- The character(s) to find\r\n     * @param {string} replace -- The character(s) to replace\r\n     *\r\n     * @return {string}\r\n     */\r\n    replace(str, find, replace) {\r\n        return str.replace(new RegExp(this.escape(find), 'g'), replace);\r\n    }\r\n    /**\r\n     * @desc For redirecting http URLs\r\n     *\r\n     * @param {string} url -- The URL to redirect\r\n     *\r\n     * @return {void}\r\n     */\r\n    redirect(url = \"/\") {\r\n        window.location.href = url;\r\n    }\r\n    /**\r\n     * @desc Finds page relative href\r\n     *\r\n     * @return {string}\r\n     */\r\n    href() {\r\n        return this.replace(window.location.href, window.location.origin, \"\");\r\n    }\r\n    /**\r\n     * @desc Calculates the scrollbar width\r\n     *\r\n     * @return {number}\r\n     */\r\n    scrollWidth() {\r\n        return window.innerWidth - document.documentElement.clientWidth;\r\n    }\r\n    /**\r\n     * @desc Checks a file for existence\r\n     *\r\n     * @param {string} file -- The absolute file path\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    fileExist(file) {\r\n        // Create a new XML HTTP Request\r\n        let xhr = new XMLHttpRequest();\r\n        // Request the file\r\n        xhr.open('HEAD', file, false);\r\n        xhr.send();\r\n        // File not found\r\n        if (xhr.status == \"404\") {\r\n            return false;\r\n        }\r\n        // File found\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    /**\r\n     * @desc Reads and returns a file content as a promise in JSON format\r\n     *\r\n     * @param {string} file -- The absolute file path\r\n     *\r\n     * @return {object|boolean}\r\n     */\r\n    json(file, strict = false) {\r\n        // Check strict mod\r\n        if (strict) {\r\n            // Check file existence\r\n            if (!this.fileExist(file)) {\r\n                return false;\r\n            }\r\n        }\r\n        // Create a new promise\r\n        const promise = new Promise((resolve, reject) => {\r\n            let final = null;\r\n            // Fetch file\r\n            fetch(file)\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                final = result;\r\n            })\r\n                .then(() => {\r\n                // Resolve the promise\r\n                resolve(final);\r\n            });\r\n        });\r\n        // Return the promise\r\n        return promise;\r\n    }\r\n    /**\r\n     * @desc Reads and returns a file content as a promise in plain text\r\n     *\r\n     * @param {string} file -- The absolute file path\r\n     *\r\n     * @return {object|boolean}\r\n     */\r\n    text(file, strict = false) {\r\n        // Check strict mod\r\n        if (strict) {\r\n            // Check file existence\r\n            if (!this.fileExist(file)) {\r\n                return false;\r\n            }\r\n        }\r\n        // Create a new promise\r\n        const promise = new Promise((resolve, reject) => {\r\n            let final = null;\r\n            // Fetch file\r\n            fetch(file)\r\n                .then(response => response.text())\r\n                .then(result => {\r\n                final = result;\r\n            })\r\n                .then(() => {\r\n                // Resolve the promise\r\n                resolve(final);\r\n            });\r\n        });\r\n        // Return the promise\r\n        return promise;\r\n    }\r\n    /**\r\n     * @desc Creates a promise to copy a text to clipboard and returns the result\r\n     *\r\n     * @param {string} text -- The text to copy\r\n     *\r\n     * @return {void|boolean}\r\n     */\r\n    copy(text) {\r\n        // Create a new promise\r\n        const promise = new Promise((resolve, reject) => {\r\n            let result = null;\r\n            navigator.clipboard.writeText(text)\r\n                .then(() => result = true, err => {\r\n                console.error('Copy Error: ', err);\r\n                result = false;\r\n            })\r\n                .then(() => {\r\n                // Resolve the promise\r\n                resolve(result);\r\n            });\r\n        });\r\n        // Return the promise\r\n        return promise;\r\n    }\r\n    /**\r\n     * @desc Adds a class to a selector\r\n     *\r\n     * @param {string|object} selector -- The selector name (object)\r\n     * @param {string} cls             -- The class name\r\n     *\r\n     * @return {void}\r\n     */\r\n    addClass(selector, cls) {\r\n        let node = null;\r\n        // Check the selector\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Add the class\r\n        if (!node.classList.contains(cls)) {\r\n            node.classList.add(cls);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Removes a class to a selector\r\n     *\r\n     * @param {string | object} selector -- The selector name (object)\r\n     * @param {string} cls               -- The class name\r\n     *\r\n     * @return {void}\r\n     */\r\n    removeClass(selector, cls) {\r\n        let node = null;\r\n        // Check the selector\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Remove the class\r\n        if (node.classList.contains(cls)) {\r\n            node.classList.remove(cls);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Toggles an old class with a new class for a selector\r\n     *\r\n     * @param {string|object} selector -- The selector name (object)\r\n     * @param {string}        oldCls   -- The old class name\r\n     * @param {string}        newCls   -- The new class name\r\n     *\r\n     * @return {void}\r\n     */\r\n    toggleClass(selector, oldCls, newCls) {\r\n        let node = null;\r\n        // Check the selector\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Remove the old class\r\n        if (node.classList.contains(oldCls)) {\r\n            node.classList.remove(oldCls);\r\n        }\r\n        // Add the new class\r\n        if (!node.classList.contains(newCls)) {\r\n            node.classList.add(newCls);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Adds a class list(array) to a selector\r\n     *\r\n     * @param {string|object} selector -- The selector name (object)\r\n     * @param {string[]} classList     -- The class list (array)\r\n     *\r\n     * @return {void}\r\n     */\r\n    addClasses(selector, classList) {\r\n        let node = null;\r\n        // Check the selector\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Loop classes\r\n        classList.forEach((cls) => {\r\n            // Add the class\r\n            if (!node.classList.contains(cls)) {\r\n                node.classList.add(cls);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @desc Converts and returns a string into uppercase, taking into account the current locale\r\n     *\r\n     * @param {string} text -- The text to excecute\r\n     *\r\n     * @return {string}\r\n     */\r\n    upper(text) {\r\n        return text.toLocaleUpperCase();\r\n    }\r\n    /**\r\n     * @desc Converts and returns a string into lowercase, taking into account the current locale\r\n     *\r\n     * @param {string} text -- The text to excecute\r\n     *\r\n     * @return {string}\r\n     */\r\n    lower(text) {\r\n        return text.toLocaleLowerCase();\r\n    }\r\n    /**\r\n     * @desc Returns the computed style for an element\r\n     *\r\n     * @param {string | HTMLElement} selector -- The node seclector\r\n     *\r\n     * @return {string}\r\n     */\r\n    getStyle(selector, property) {\r\n        let node, result;\r\n        // String type\r\n        if (typeof (selector) == \"string\") {\r\n            node = document.querySelectorAll(selector);\r\n        }\r\n        else {\r\n            node = selector;\r\n        }\r\n        // Property exists\r\n        const view = (node.ownerDocument || document).defaultView;\r\n        if (view && view.getComputedStyle) {\r\n            result = view.getComputedStyle(node, null).getPropertyValue(property);\r\n        }\r\n        // Property not exists\r\n        else {\r\n            result == undefined;\r\n        }\r\n        // Return result\r\n        return result;\r\n    }\r\n    /**\r\n     * @desc Checks if the browser is fullscreen\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    isFullscreen() {\r\n        if (window.innerWidth == screen.width && window.innerHeight == screen.height) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * @desc Request an element to be fullscreen\r\n     *\r\n     * @var {any} method -- The request method\r\n     *\r\n     * @return {void}\r\n     */\r\n    fullscreen(elem) {\r\n        if (!this.isFullscreen()) {\r\n            const method = elem.requestFullScreen || elem.webkitRequestFullScreen || elem.mozRequestFullScreen || elem.msRequestFullScreen;\r\n            return method.call(elem);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Exits browser fullscreen\r\n     *\r\n     * @var {any} elem -- The document object\r\n     *\r\n     * @return {void}\r\n     */\r\n    exitFullscreen() {\r\n        const elem = document;\r\n        if (this.isFullscreen()) {\r\n            return elem.exitFullscreen() || elem.webkitExitFullscreen() || elem.mozCancelFullScreen() || elem.msExitFullscreen();\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Helpers.js.map","/**\r\n * Import the parent Class\r\n */\r\nimport { Helpers } from \"./Helpers\";\r\n/**\r\n * @desc Used for setting & handling animations\r\n */\r\nexport class Animations extends Helpers {\r\n    /**\r\n     * @desc Constructor method\r\n     */\r\n    constructor() {\r\n        // Inherit the parent class\r\n        super();\r\n    }\r\n    /**\r\n     * @desc Sets and returns a new animation Promise\r\n     *\r\n     * @param {any}     selector  -- The selector name (object)\r\n     * @param {string}  animation -- The animation name\r\n     * @param {boolean} clear     -- For clearing the animation after it has been ended\r\n     *\r\n     * @return {any}\r\n     */\r\n    animation(selector, animation = \"\", clear = false) {\r\n        let node = null;\r\n        // Check the selectors\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Check animation\r\n        if (animation == \"\") {\r\n            // Unset the animation\r\n            // node.removeAttribute('data-animation');\r\n            node.style.removeProperty('animation-name');\r\n            // Exit the method\r\n            return false;\r\n        }\r\n        // // Check current animation\r\n        // if (this.getStyle(selector, 'animation-name') == animation) {\r\n        //     // TODO\r\n        // }\r\n        // // Wait for all animations to be finished\r\n        // Promise.all(\r\n        //     node.getAnimations({ subtree: false })\r\n        //     .map((animation:any) => animation.finished)\r\n        // ).then(() => {\r\n        //     // TODO\r\n        // });\r\n        // Animation promise\r\n        const promise = new Promise((resolve, reject) => {\r\n            // Check datasets and set variables\r\n            this.datasets(node);\r\n            // Set the new animation\r\n            // node.setAttribute(\"data-animation\", animation);\r\n            node.style.setProperty('animation-name', animation);\r\n            // Animation resolve callback\r\n            function animationEnd(event) {\r\n                event.stopPropagation();\r\n                // Check animation clearance\r\n                if (clear) {\r\n                    // node.removeAttribute('data-animation');\r\n                    node.style.removeProperty('animation-name');\r\n                }\r\n                // Promise on resolve\r\n                resolve('Animation ended!');\r\n                // Promise on reject\r\n                reject('Animation crashed!');\r\n            }\r\n            // Animation end listener\r\n            node.addEventListener('animationend', animationEnd, { once: true });\r\n        });\r\n        // Return the promise\r\n        return promise;\r\n    }\r\n    /**\r\n     * @desc Checks animation datasets and sets relevant variables\r\n     *\r\n     * @param {object} selector -- The selector object\r\n     *\r\n     * @return {void}\r\n     */\r\n    datasets(selector) {\r\n        // data-animation\r\n        if (selector.dataset.animation) {\r\n            selector.style.setProperty('animation-name', selector.dataset.animation);\r\n        }\r\n        // data-duration\r\n        if (selector.dataset.duration) {\r\n            selector.style.setProperty('--animation-duration', selector.dataset.duration);\r\n        }\r\n        // data-delay\r\n        if (selector.dataset.delay) {\r\n            selector.style.setProperty('--animation-delay', selector.dataset.delay);\r\n        }\r\n        // data-count\r\n        if (selector.dataset.count) {\r\n            selector.style.setProperty('--animation-count', selector.dataset.count);\r\n        }\r\n        // data-function\r\n        if (selector.dataset.function) {\r\n            selector.style.setProperty('--animation-function', selector.dataset.function);\r\n        }\r\n        // data-state\r\n        if (selector.dataset.state) {\r\n            selector.style.setProperty('--animation-state', selector.dataset.state);\r\n        }\r\n        // data-position\r\n        if (selector.dataset.position) {\r\n            selector.style.setProperty('--animation-position', selector.dataset.position);\r\n        }\r\n        // data-scale\r\n        if (selector.dataset.scale) {\r\n            selector.style.setProperty('--animation-scale', selector.dataset.scale);\r\n        }\r\n        // data-perspective\r\n        if (selector.dataset.perspective) {\r\n            selector.style.setProperty('--animation-perspective', selector.dataset.perspective);\r\n        }\r\n        // data-degree\r\n        if (selector.dataset.degree) {\r\n            selector.style.setProperty('--animation-degree', selector.dataset.degree);\r\n        }\r\n        // data-height\r\n        if (selector.dataset.height) {\r\n            selector.style.setProperty('--animation-height', selector.dataset.height);\r\n        }\r\n        // data-width\r\n        if (selector.dataset.width) {\r\n            selector.style.setProperty('--animation-width', selector.dataset.width);\r\n        }\r\n        // data-brightness\r\n        if (selector.dataset.brightness) {\r\n            selector.style.setProperty('--animation-brightness', selector.dataset.brightness);\r\n        }\r\n        // data-dimension\r\n        if (selector.dataset.dimension) {\r\n            selector.style.setProperty('--animation-dimension', selector.dataset.dimension);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Makes selectors animated\r\n     *\r\n     * @param {string | object} selector -- The selector name (object)\r\n     * @param {string}          mod      -- The scroll mod\r\n     *\r\n     * @return {void}\r\n     */\r\n    animated(selector, mod = 'bottom') {\r\n        let nodes = null;\r\n        // Check the selectors\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                nodes = document.querySelectorAll(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                nodes = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        nodes.forEach((node) => {\r\n            let tolerance = node.dataset.tolerance;\r\n            let animationEnter = node.dataset.enter;\r\n            let animationExit = node.dataset.exit;\r\n            // Check data-tolerance\r\n            if (!tolerance) {\r\n                tolerance = 0;\r\n            }\r\n            // Check data-enter\r\n            if (!animationEnter) {\r\n                animationEnter = 'fadeIn';\r\n            }\r\n            // Check data-exit\r\n            if (!animationExit) {\r\n                animationExit = 'fadeOut';\r\n            }\r\n            // Check element visibility\r\n            if (this.visible(node, mod, tolerance)) {\r\n                // Animation enter\r\n                this.animation(node, animationEnter);\r\n            }\r\n            else {\r\n                // Animation exit\r\n                this.animation(node, animationExit);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @desc Loops an animation\r\n     *\r\n     * @param {string | object} selector -- The selector name (object)\r\n     * @param {number}          duration -- The loop duration (in miliseconds)\r\n     * @param {number}          count    -- The loop count\r\n     *\r\n     * @return {void | boolean}\r\n     */\r\n    animating(selector, duration = 1000, count = Infinity) {\r\n        let node = null;\r\n        // Check the selectors\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Check element visibility\r\n        if (this.visible(node, \"both\", 0)) {\r\n            this.loop(() => {\r\n                let animation = node.getAttribute('data-animation');\r\n                // node.removeAttribute('data-animation');\r\n                node.style.removeProperty('animation-name');\r\n                node.offsetTop;\r\n                // node.setAttribute('data-animation', animation);\r\n                node.style.setProperty('animation-name', animation);\r\n            }, duration, count - 1);\r\n        }\r\n    }\r\n    /**\r\n     * @desc For navigation active class on page scroll\r\n     *\r\n     * @param {string | object} selector  -- The selector name (object)\r\n     * @param {string | object} navigator -- The navigator selector name (object)\r\n     * @param {string}          active    -- The navigator active class\r\n     * @param {number}          tolerance -- The scroll tolerance\r\n     *\r\n     * @return {void | boolean}\r\n     */\r\n    navigated(selector, navigator, active = 'active', tolerance = 0) {\r\n        let selectors = null;\r\n        let navigators = null;\r\n        // Check the selectors\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                selectors = document.querySelectorAll(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                selectors = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Check the navigators\r\n        if (this.exist(navigator)['status']) {\r\n            if (typeof (navigator) === \"string\") {\r\n                navigators = document.querySelectorAll(navigator);\r\n            }\r\n            else if (typeof (navigator) === \"object\") {\r\n                navigators = navigator;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(navigator)['message'];\r\n        }\r\n        // Navigation links\r\n        selectors.forEach((node) => {\r\n            let top = window.scrollY;\r\n            let height = node.offsetHeight;\r\n            let offset = node.offsetTop - tolerance;\r\n            let id = node.getAttribute(\"id\");\r\n            // Set the active class\r\n            if (top >= offset && top < offset + height) {\r\n                navigators.forEach((link) => {\r\n                    link.classList.remove(active);\r\n                    document.querySelector(`${navigator}[href*=${id}`).classList.add(active);\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=Animations.js.map","/**\r\n * Polaris Slideshow Plugin v1.2.2\r\n * MIT License github.com/heminsatya/polaris-plugins | © 2022 polarisui.com\r\n**/\r\n/**\r\n * Import the Core Class\r\n */ \r\nimport {Slideshow} from \"./modules/Slideshow\";\r\n\r\n\r\n/**\r\n * Export default\r\n */\r\nexport default Slideshow;","\"use strict\";\r\n/**\r\n * Dependencies\r\n */\r\nimport { Animations } from \"polaris-core/dist/js/modules/Animations\";\r\n\r\n\r\n/**\r\n * @desc The Slideshow class for handling slideshow componet and its slides\r\n */\r\nexport class Slideshow extends Animations {\r\n\r\n    /**\r\n     * @desc Class properties\r\n     */\r\n    // Name keys\r\n    public nameSlideshow:         string = 'slideshow';\r\n    public nameSlideshowItem:     string = 'item';\r\n    public nameSlideshowMedia:    string = 'media';\r\n    public nameSlideshowOverlays: string = 'overlays';\r\n    public nameSlideshowOverlay:  string = 'overlay';\r\n    public nameSlideshowCaptions: string = 'captions';\r\n    public nameSlideshowCaption:  string = 'caption';\r\n    public nameSlideshowOption:   string = 'option';\r\n    public nameSlideshowProgress: string = 'progress';\r\n    public nameSlideshowCounter:  string = 'counter';\r\n    public nameSlideshowPrev:     string = 'prev';\r\n    public nameSlideshowNext:     string = 'next';\r\n    public nameSlideshowDots:     string = 'dots';\r\n    public nameSlideshowFilter:   string = 'filter';\r\n\r\n    // Slideshow selectors\r\n    private slideshow:         any     = null;\r\n    private slideshowItems:    any     = null;\r\n    private slideshowMedias:   any     = null; \r\n    private slideshowProgress: any     = null;\r\n    private slideshowCounter:  any     = null;\r\n    private slideshowPrev:     any     = null;\r\n    private slideshowNext:     any     = null;\r\n    private slideshowDots:     any     = null;\r\n\r\n    // Private properties\r\n    private itemsCount:        number  = 0;\r\n    private activeItem:        any     = null;\r\n    private activeDot:         any     = null;\r\n    private activeIndex:       number  = 0;\r\n    private animationEnter:    string  = this.fadeInAnimation;\r\n    private animationExit:     string  = this.fadeOutAnimation;\r\n    private slideInterval:     any     = null;\r\n    private timerInterval:     any     = null;\r\n    private pauseIntervals:    boolean = false;\r\n    private remainingTime:     number  = 0;\r\n    private sliding:           boolean = false;\r\n    private firstLoad:         boolean = true;\r\n    private mediaLoaded:       boolean = false;\r\n\r\n    // Default options\r\n    private mediaShrink:       boolean = true;\r\n    private isAutoplay:        boolean = false;\r\n    private hoverPause:        boolean = false;\r\n    private timeout:           number  = 6000;\r\n    private hasProgress:       boolean = false;\r\n    private hasCounter:        boolean = false;\r\n    private hasControls:       boolean = true;\r\n    private hasDots:           boolean = false;\r\n    private width:             any     = 0;\r\n    private height:            any     = 0;\r\n    private slideshowColor:    any     = 'auto';\r\n    private mediaFilter:       any     = null;\r\n    private mediaControls:     boolean = true;\r\n    private mediaAutoplay:     boolean = false;\r\n\r\n    // Slideshow options\r\n    private options: any = {\r\n        \"mediaShrink\":      this.mediaShrink,\r\n        'isAutoplay':       this.isAutoplay,\r\n        'hoverPause':       this.hoverPause,\r\n        'timeout':          this.timeout,\r\n        'hasProgress':      this.hasProgress,\r\n        'hasCounter':       this.hasCounter,\r\n        'hasControls':      this.hasControls,\r\n        'hasDots':          this.hasDots,\r\n        'round':            false,\r\n        'width':            null,\r\n        'height':           null,\r\n        'color':            this.slideshowColor,\r\n        'mediaControls':    this.mediaControls,\r\n        'mediaAutoplay':    this.mediaAutoplay,\r\n        'mediaFilter':      this.mediaFilter,\r\n        'phoneHeight':      null,\r\n        'tabletHeight':     null,\r\n        'desktopHeight':    null,\r\n        'mediaEnter':       null,\r\n        'mediaExit':        null,\r\n        'mediaEnterPrev':   null,\r\n        'mediaExitPrev':    null,\r\n        'mediaEnterNext':   null,\r\n        'mediaExitNext':    null,\r\n        'overlayEnter':     null,\r\n        'overlayExit':      null,\r\n        'overlayEnterPrev': null,\r\n        'overlayExitPrev':  null,\r\n        'overlayEnterNext': null,\r\n        'overlayExitNext':  null,\r\n        'captionEnter':     null,\r\n        'captionExit':      null,\r\n        'captionEnterPrev': null,\r\n        'captionExitPrev':  null,\r\n        'captionEnterNext': null,\r\n        'captionExitNext':  null,\r\n        'counterPosition':  null,\r\n        'dotsPosition':     null,\r\n        'captionsPosition': null,\r\n        'overlaysPosition': null,\r\n    }\r\n\r\n\r\n    /**\r\n     * @desc Constructor method\r\n     * \r\n     * @param {string|HTMLElement} slideshow -- The required slideshow selector\r\n     * @param {object}             options   -- The optional slideshow options\r\n     */\r\n    constructor(slideshow:string|HTMLElement, options:object = {}) {\r\n        // Inherit the parent class\r\n        super();\r\n\r\n        // Valid slideshow selector\r\n        if (this.exist(slideshow)['status']) {\r\n            // String slideshow selector\r\n            if (typeof(slideshow) === \"string\") {\r\n                this.slideshow = document.querySelector(slideshow);\r\n            }\r\n            // HTMLElement slideshow selector\r\n            else if (typeof(slideshow) === \"object\") {\r\n                this.slideshow = slideshow;\r\n            }\r\n\r\n            // Set slideshow items\r\n            this.slideshowItems  = this.slideshow.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowItem}`);\r\n            this.itemsCount      = this.slideshowItems.length;\r\n\r\n            // No slide\r\n            if (this.itemsCount == 0) {\r\n                throw 'No slide found!';\r\n            }\r\n    \r\n            // Set items media\r\n            this.slideshowMedias = this.slideshow.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowMedia}`);\r\n    \r\n            // Update options\r\n            if (options) this.options = options;\r\n\r\n            // Check options\r\n            if (!('mediaShrink' in this.options))   this.options['mediaShrink']     = this.mediaShrink;\r\n            if (!('isAutoplay' in this.options))    this.options['isAutoplay']      = this.isAutoplay;\r\n            if (!('hoverPause' in this.options))    this.options['hoverPause']      = this.hoverPause;\r\n            if (!('timeout' in this.options))       this.options['timeout']         = this.timeout;\r\n            if (!('hasProgress' in this.options))   this.options['hasProgress']     = this.hasProgress;\r\n            if (!('hasCounter' in this.options))    this.options['hasCounter']      = this.hasCounter;\r\n            if (!('hasControls' in this.options))   this.options['hasControls']     = this.hasControls;\r\n            if (!('hasDots' in this.options))       this.options['hasDots']         = this.hasDots;\r\n            if (!('mediaControls' in this.options)) this.options['mediaControls']   = this.mediaControls;\r\n            if (!('mediaAutoplay' in this.options)) this.options['mediaAutoplay']   = this.mediaAutoplay;\r\n            if (!('color' in this.options))         this.options['color']           = this.slideshowColor\r\n            if (!('mediaFilter' in this.options))   this.options['mediaFilter']     = this.mediaFilter;\r\n    \r\n            // Start the slideshow\r\n            this.start();\r\n        }\r\n\r\n        // Invalid slideshow selector\r\n        else {\r\n            throw 'The \"slideshow\" property of the Slideshow class cannot be empty or null!';\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * @desc Starts the Slideshow\r\n     * \r\n     * @return {void}\r\n     */\r\n    private start(): void {\r\n        // Set items\r\n        this.setItems();\r\n\r\n        // Set options\r\n        this.setOptions();\r\n        \r\n        // Previous Slide\r\n        this.prevSlide();\r\n        \r\n        // Next Slide\r\n        this.nextSlide();\r\n        \r\n        // Dots Slide\r\n        this.dotSlide();\r\n\r\n        // Slideshow events\r\n        this.slideEvents();\r\n\r\n        \r\n        /**\r\n         *  Set the deault slide\r\n         */\r\n         let interval = setInterval(() => {\r\n            // Fully loaded\r\n            if (this.mediaLoaded) {\r\n                this.setSlide(0);\r\n\r\n                // Clear the interval\r\n                clearInterval(interval);\r\n            }\r\n        }, 10);\r\n    }\r\n\r\n    \r\n    /**\r\n     * @desc Sets Slideshow items\r\n     * \r\n     * @var {HTMLElement}   media       -- The items media\r\n     * @var {HTMLElement[]} overlays    -- The items overlays \r\n     * @var {HTMLElement[]} captions    -- The items captions\r\n     * \r\n     * @return {void}\r\n     */\r\n    private setItems(): void {\r\n        // Loop items\r\n        for (let i = 0; i < this.itemsCount; i++) {\r\n            // Set data-index\r\n            this.slideshowItems[i].dataset.index = i;\r\n\r\n            // Item media\r\n            if (this.slideshowItems[i].querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowMedia}`)) {\r\n                const media:any = this.slideshowItems[i].querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowMedia}`);\r\n                    \r\n                // Add animation, animation-animated classList\r\n                this.addClasses(media, [this.nameAnimation, this.nameAnimation + this.modSep + this.nameAnimated]);\r\n                \r\n                // Set content for the media\r\n                this.setContent(media, 'media');\r\n\r\n                // Set the default slide active class\r\n                if (i == 0) {\r\n                    // Set the active class\r\n                    this.activeItem = this.slideshowItems[0];\r\n\r\n                    // Add active class to slide\r\n                    this.addClass(this.activeItem, this.nameActive);\r\n                }\r\n\r\n                // Set default --animation\r\n                media.style.setProperty('--animation', 'none');\r\n            }\r\n\r\n            // Item overlays\r\n            if (this.slideshowItems[i].querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowOverlay}`).length) {\r\n                const overlays:any[] = this.slideshowItems[i].querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowOverlay}`);\r\n                \r\n                // Set item overlays\r\n                overlays.forEach((overlay:any) => {\r\n                    // Add animation, animation-animated classList\r\n                    this.addClasses(overlay, [this.nameAnimation, this.nameAnimation + this.modSep + this.nameAnimated]);\r\n\r\n                    // Set content for overlays\r\n                    this.setContent(overlay);\r\n                \r\n                    // Set default --animation\r\n                    overlay.style.setProperty('--animation', 'none');\r\n                });\r\n            }\r\n\r\n            // Item captions\r\n            if (this.slideshowItems[i].querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCaption}`).length) {\r\n                const captions:any[] = this.slideshowItems[i].querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCaption}`);\r\n                \r\n                // Set item captions\r\n                captions.forEach((caption:any) => {\r\n                    // Add animation, animation-animated classList\r\n                    this.addClasses(caption, [this.nameAnimation, this.nameAnimation + this.modSep + this.nameAnimated]);\r\n                \r\n                    // Set default --animation\r\n                    caption.style.setProperty('--animation', 'none');\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @desc Extract extension from a file name\r\n     * \r\n     * @param {string} file -- The file name to process\r\n     * \r\n     * @var {string} ext -- The file extension\r\n     * @var {array}  arr -- The file string array\r\n     * \r\n     * @return {string}\r\n     */\r\n    private fileExtension(file:string): string {\r\n        let ext: string   = '';\r\n        let arr: string[] = [];\r\n\r\n        // Set file array\r\n        arr = file.split('.');\r\n\r\n        // Set extension\r\n        ext = '.' + arr[arr.length - 1];\r\n\r\n        // Return the extracted extension\r\n        return ext;\r\n    }\r\n\r\n\r\n    /**\r\n     * @desc Sets the slide content\r\n     * \r\n     * @param {HTMLElement} node -- The node to set content for\r\n     * \r\n     * @var {HTMLElement} inner    -- The inner media element\r\n     * @var {string}      maxWidth -- Media images max-width\r\n     * @var {string}      alt      -- The image alternative text\r\n     * @var {string}      ext      -- The media extension\r\n     * @var {string}      type     -- The media MIME type\r\n     * @var {string}      controls -- The video controls\r\n     * @var {string}      muted    -- The muted video\r\n     * \r\n     * @return {void}\r\n     */\r\n    private setContent(node:any, mode:any=null): void {\r\n        let inner: any, index:number = 0, maxWidth:string = '', alt: string = '', ext: string = '', type: string = '', controls: string = '', muted: string = '';\r\n\r\n        // Check mode\r\n        if (mode == 'media') {\r\n            // Find index\r\n            index = Number(node.parentElement.dataset.index);\r\n\r\n            // Find extension\r\n            if (node.dataset.src) ext = this.fileExtension(node.dataset.src);\r\n\r\n            // Check mediaControls\r\n            if (this.options['mediaControls']) controls = ' controls';\r\n        }\r\n\r\n        // Media max-width\r\n        if (this.options['mediaShrink']) maxWidth = ' style=\"max-width: inherit;\"'\r\n\r\n        // Image\r\n        if (node.dataset.type == 'image') {\r\n            \r\n            // Check type\r\n            if (!['.webp', '.jpg', '.jpeg', '.apng', '.png', '.avif', '.gif', '.svg'].includes(ext)) {\r\n                throw `Unsupported image extension detected! \\nSupported image extensions are: ['.webp', '.jpg', '.jpeg', '.apng', '.png', '.avif', '.gif', '.svg']`\r\n            }\r\n\r\n            // Check alternative text\r\n            if (node.dataset.alt) alt = ` alt=\"${node.dataset.alt}\"`\r\n\r\n            // Set node content\r\n            node.innerHTML = `<img src=\"${node.dataset.src}\"${alt+maxWidth}>`;\r\n\r\n            // Set inner node\r\n            inner = node.querySelector('img');\r\n        }\r\n\r\n        // Video\r\n        else if (node.dataset.type == 'video') {\r\n            // Produce file type\r\n            if (ext == '.mp4')       type = 'video/mp4';\r\n            else if (ext == '.webm') type = 'video/webm';\r\n            else                     type = '';\r\n\r\n            // Check type\r\n            if (!type) {\r\n                throw `Unsupported video extension detected! \\nSupported video extensions are: ['.mp4', '.webm']`\r\n            }\r\n\r\n            // Check autoplay\r\n            if (this.options['mediaAutoplay']) {\r\n                muted = ' muted loop';\r\n            }\r\n\r\n\r\n            // Set node content\r\n            node.innerHTML = `<video preload=\"metadata\"${controls+muted+maxWidth}><source src=\"${node.dataset.src}\" type=\"${type}\"></video>`;\r\n\r\n            // Set inner node\r\n            inner = node.querySelector('video');\r\n        }\r\n\r\n        // HTML\r\n        else if (node.dataset.type == 'html') {\r\n            // Set node content\r\n            if (node.dataset.html) node.innerHTML = node.dataset.html\r\n\r\n            // Set inner node\r\n            if (node.firstElementChild) inner = node.firstElementChild;\r\n            else                        inner = node;\r\n        }\r\n\r\n        // Unknown\r\n        else {\r\n            throw 'Unsupported media format detected!';\r\n        }\r\n\r\n        // Check heigts\r\n        if (this.options['height'] || this.options['phoneHeight'] || this.options['tabletHeight'] || this.options['desktopHeight']) {\r\n            if (this.options['mediaShrink']) inner.style.maxHeight = '100%';\r\n        }\r\n\r\n        // Media mode        \r\n        if (mode == 'media') {\r\n            // Fetch inner size after loading\r\n            // Image\r\n            if (node.dataset.type == 'image') {\r\n                inner.onload = () => {\r\n                    // Set the default width\r\n                    if (!this.options['width'] && inner.naturalWidth > this.width) this.width = inner.naturalWidth;\r\n                    if (!this.options['width'] && inner.getBoundingClientRect().width > this.width) this.width = inner.getBoundingClientRect().width;\r\n\r\n                    // Set the default height\r\n                    if (!this.options['height'] && inner.clientHeight > this.height) this.height = inner.clientHeight;\r\n                    // if (!this.options['height'] && inner.getBoundingClientRect().height > this.height) this.height = inner.getBoundingClientRect().height;\r\n\r\n                    // Fully loaded\r\n                    if (index + 1 == this.itemsCount) this.mediaLoaded = true;\r\n                };\r\n            }\r\n            // Video\r\n            else if (node.dataset.type == 'video') {\r\n                inner.onloadedmetadata = () => {\r\n                    // Set the default width\r\n                    if (!this.options['width'] && inner.clientWidth > this.width) this.width = inner.clientWidth;\r\n                    if (!this.options['width'] && inner.getBoundingClientRect().width > this.width) this.width = inner.getBoundingClientRect().width;\r\n\r\n                    // Set the default height\r\n                    if (!this.options['height'] && inner.clientHeight > this.height) this.height = inner.clientHeight;\r\n                    // if (!this.options['height'] && inner.getBoundingClientRect().height > this.height) this.height = inner.getBoundingClientRect().height;\r\n\r\n                    // Fully loaded\r\n                    if (index + 1 == this.itemsCount) this.mediaLoaded = true;\r\n                };\r\n            }\r\n            // Others\r\n            else {\r\n                setTimeout(() => {\r\n                    // Fully loaded\r\n                    if (index + 1 == this.itemsCount) this.mediaLoaded = true;\r\n                }, 10);\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * @desc Sets Slideshow options\r\n     * \r\n     * @var {string}      controlsContent -- Slideshow controls (prev & next) HTML content\r\n     * @var {string}      dotsContent     -- Slideshow dots HTML content\r\n     * @var {HTMLElement} dots            -- Dots parent (container)\r\n     * @var {HTMLElement} captions        -- Captions parent (container)\r\n     * @var {HTMLElement} overlays        -- Overlays parent (container)\r\n     * @var {number}      windowWidth     -- Window available width\r\n     * @var {HTMLElement} inner           -- The inner media element\r\n     * @var {function}    interval        -- Slideshow size interval\r\n     * @var {string[]}    filterCls       -- the filter class list\r\n     * \r\n     * @return {void|boolean}\r\n     */\r\n    private setOptions(): void|boolean {\r\n        /**\r\n         *  Single & Multiple slide\r\n         */\r\n        if (this.itemsCount >= 1) {\r\n            // Check progress\r\n            if (this.options['hasProgress']) {\r\n                if (!this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowProgress}`)) {\r\n                    this.append(\"div\", this.slideshow, \"\", [this.nameSlideshow + this.chiSep + this.nameSlideshowProgress]);\r\n                }\r\n            }\r\n\r\n            // Check counter\r\n            if (this.options['hasCounter']) {\r\n                if (!this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCounter}`)) {\r\n                    this.append(\"div\", this.slideshow, \"\", [this.nameSlideshow + this.chiSep + this.nameSlideshowCounter]);\r\n                }\r\n            }\r\n\r\n            // Check controls\r\n            if (this.options['hasControls']) {\r\n                if (!this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowPrev}`)) {\r\n                    const controlsContent:string = '&#10094;';\r\n\r\n                    this.append(\"div\", this.slideshow, controlsContent, [this.nameSlideshow + this.chiSep + this.nameSlideshowPrev]);\r\n                }\r\n                if (!this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowNext}`)) {\r\n                    const controlsContent:string = '&#10095;';\r\n\r\n                    this.append(\"div\", this.slideshow, controlsContent, [this.nameSlideshow + this.chiSep + this.nameSlideshowNext]);\r\n                }\r\n            }\r\n\r\n            // Check dots\r\n            if (this.options['hasDots']) {\r\n                if (!this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowDots}`)) {\r\n                    let dotsContent:string = '';\r\n\r\n                    for (let i = 0; i < this.itemsCount; i++) {\r\n                        this.slideshowItems[i].dataset.index = i;\r\n                        dotsContent += `<li data-index=\"${i}\"></li>`;\r\n                    }\r\n\r\n                    this.append(\"ul\", this.slideshow, dotsContent, [this.nameSlideshow + this.chiSep + this.nameSlideshowDots]);\r\n                }\r\n            }\r\n\r\n            // Update slide items\r\n            this.slideshowProgress = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowProgress}`);\r\n            this.slideshowCounter  = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCounter}`);\r\n            this.slideshowPrev     = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowPrev}`);\r\n            this.slideshowNext     = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowNext}`);\r\n            this.slideshowDots     = this.slideshow.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowDots} li`);\r\n\r\n            // Set the default dot\r\n            if (this.slideshowDots.length) {\r\n                // Set the active class\r\n                this.addClass(this.slideshowDots[0], this.nameActive);\r\n    \r\n                // Update the active dot\r\n                this.activeDot = this.slideshowDots[0];\r\n            }\r\n        }\r\n        \r\n        \r\n        /**\r\n         *  Single slide\r\n         */\r\n        if (this.itemsCount == 1) {\r\n            // Hide progress & controls\r\n            this.slideshowProgress.style.display = 'none';\r\n            this.slideshowPrev.style.display     = 'none';\r\n            this.slideshowNext.style.display     = 'none';\r\n\r\n            // Hide dots parent\r\n            this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowDots}`).style.display = 'none';\r\n        }\r\n\r\n\r\n        /**\r\n         *  Set slideshow width, height\r\n         */\r\n        let interval = setInterval(() => {\r\n            // Fully loaded\r\n            if (this.mediaLoaded) {\r\n                /**\r\n                 * Slideshow width\r\n                 */\r\n                // Check width property\r\n                if (this.options['width']) this.width = this.options['width'];\r\n\r\n                // Set slideshow width\r\n                if (this.options['width']) this.slideshow.style.maxWidth = this.options['width'];\r\n                else                       this.slideshow.style.maxWidth = this.width + 'px';\r\n\r\n                /**\r\n                 * Slideshow height\r\n                 */\r\n                // Check height property\r\n                if (this.options['height']) this.height = this.options['height'];\r\n                else if (this.height > window.innerHeight) this.height = window.innerHeight;\r\n\r\n                // Window width\r\n                const windowWidth = window.innerWidth;\r\n\r\n                // Desktop\r\n                if (windowWidth >= this.desktopWidth && this.options['desktopHeight']) {\r\n                    this.slideshow.style.height = this.options['desktopHeight'];\r\n                }\r\n                // Tablet\r\n                else if (windowWidth < this.desktopWidth && windowWidth >= this.tabletWidth && this.options['tabletHeight']) {\r\n                    this.slideshow.style.height = this.options['tabletHeight'];\r\n                }\r\n                // Smartphone\r\n                else if (windowWidth < this.tabletWidth && windowWidth >= this.phoneWidth && this.options['phoneHeight']) {\r\n                    this.slideshow.style.height = this.options['phoneHeight'];\r\n                }\r\n                // All devices\r\n                else {\r\n                    if (this.options['height']) this.slideshow.style.height = this.options['height'];\r\n                    else                        this.slideshow.style.height = this.height + 'px';\r\n                }\r\n\r\n                // Clear the interval\r\n                clearInterval(interval);\r\n            }\r\n        }, 10);\r\n\r\n\r\n        /**\r\n         *  Set slideshow color\r\n         */\r\n        if (this.options['color'] && this.options['color'] != 'auto') {\r\n            this.addClass(this.slideshow, this.nameSlideshow + this.modSep + this.options['color']);\r\n        }\r\n\r\n        \r\n        /**\r\n         *  Set slideshow filter\r\n         */\r\n         if (this.options['mediaFilter']) {\r\n            let filterCls : string[];\r\n\r\n            // Produce the filter class list\r\n            if (this.options['mediaFilter'] == 'auto') filterCls = [this.nameSlideshow + this.chiSep + this.nameSlideshowFilter];\r\n            else filterCls = [this.nameSlideshow + this.chiSep + this.nameSlideshowFilter, this.nameSlideshow + this.chiSep + this.nameSlideshowFilter + this.modSep + this.options['mediaFilter']];\r\n        \r\n            // Append the filter\r\n            this.append('div', this.slideshow, '', filterCls);\r\n        }\r\n\r\n\r\n        /**\r\n         *  Set slideshow roundness\r\n         */\r\n        if (this.options['round']) {\r\n            this.addClass(this.slideshow, this.nameSlideshow + this.modSep + this.nameRadius);\r\n        }\r\n\r\n\r\n        /**\r\n         *  Set slideshow positions\r\n         */\r\n        // Conter position\r\n        if (this.options['counterPosition']) {\r\n            // Check element existence\r\n            if (this.slideshowCounter) {\r\n                // Unset default positions\r\n                this.slideshowCounter.style.inset  = \"unset\";\r\n    \r\n                // Set alternative margin\r\n                if (['top', 'bottom'].includes(this.options['counterPosition'])) {\r\n                    this.slideshowCounter.style.margin = \"1rem 0\";\r\n                }\r\n                else if (['top-left', 'left', 'bottom-left', 'top-right', 'right', 'bottom-right'].includes(this.options['counterPosition'])) {\r\n                    this.slideshowCounter.style.margin = \"1rem\";\r\n                }\r\n                \r\n    \r\n                // Add position class\r\n                this.addClass(this.slideshowCounter, this.namePosition + this.modSep + this.options['counterPosition']);\r\n            }\r\n        }\r\n\r\n        // Dots position\r\n        if (this.options['dotsPosition']) {\r\n            const dots = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowDots}`);\r\n\r\n            // Check element existence\r\n            if (dots) {\r\n                // Unset default positions\r\n                dots.style.inset  = \"unset\";\r\n    \r\n                // Set alternative margin\r\n                if (['top', 'bottom'].includes(this.options['dotsPosition'])) {\r\n                    dots.style.margin = \"1rem 0\";\r\n                }\r\n                else if (['top-left', 'left', 'bottom-left', 'top-right', 'right', 'bottom-right'].includes(this.options['dotsPosition'])) {\r\n                    dots.style.margin = \"1rem\";\r\n                }\r\n\r\n                // Add position class\r\n                this.addClass(dots, this.namePosition + this.modSep + this.options['dotsPosition']);\r\n            }\r\n        }\r\n\r\n        // Captions position\r\n        if (this.options['captionsPosition']) {\r\n            const captions = this.slideshow.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCaptions}`);\r\n\r\n            // Check element existence\r\n            if (captions.length) {\r\n                captions.forEach((caption:any) => {\r\n                    // Unset default positions\r\n                    caption.style.inset  = \"unset\";\r\n    \r\n                    // Set alternative margin\r\n                    if (['top', 'bottom'].includes(this.options['captionsPosition'])) {\r\n                        caption.style.margin = \"1rem 0\";\r\n                    }\r\n                    else if (['top-left', 'left', 'bottom-left', 'top-right', 'right', 'bottom-right'].includes(this.options['captionsPosition'])) {\r\n                        caption.style.margin = \"1rem\";\r\n                    }\r\n    \r\n                    // Add position class\r\n                    this.addClass(caption, this.namePosition + this.modSep + this.options['captionsPosition']);\r\n                });\r\n            }\r\n        }\r\n\r\n        // Overlays position\r\n        if (this.options['overlaysPosition']) {\r\n            const overlays = this.slideshow.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowOverlays}`);\r\n\r\n            // Check element existence\r\n            if (overlays.length) {\r\n                overlays.forEach((overlay:any) => {\r\n                    // Unset default positions\r\n                    overlay.style.inset  = \"unset\";\r\n        \r\n                    // Set alternative margin\r\n                    if (['top', 'bottom'].includes(this.options['overlaysPosition'])) {\r\n                        overlay.style.margin = \"1rem 0\";\r\n                    }\r\n                    else if (['top-left', 'left', 'bottom-left', 'top-right', 'right', 'bottom-right'].includes(this.options['overlaysPosition'])) {\r\n                        overlay.style.margin = \"1rem\";\r\n                    }\r\n        \r\n                    // Add position class\r\n                    this.addClass(overlay, this.namePosition + this.modSep + this.options['overlaysPosition']);\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n        \r\n    /**\r\n     * @desc Handles prev control click\r\n     * \r\n     * @var {number} index -- Previous slide index\r\n     * \r\n     * @return {void}\r\n     */\r\n    private prevSlide(): void {\r\n        if (this.options['hasControls']) {\r\n            this.slideshowPrev.onclick = () => {\r\n                // Find previous index\r\n                let index:number = this.activeIndex - 1;\r\n\r\n                // Check index\r\n                if (index < 0) index = this.itemsCount - 1;\r\n\r\n                // Set slide\r\n                this.setSlide(index, 'previous');\r\n            };\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @desc Handles next control click\r\n     * \r\n     * @var {number} index -- Next slide index\r\n     * \r\n     * @return {void}\r\n     */\r\n    private nextSlide(): void {\r\n        if (this.options['hasControls']) {\r\n            this.slideshowNext.onclick = () => {\r\n                // Find next index\r\n                let index:number = this.activeIndex + 1;\r\n\r\n                // Check index\r\n                if (index >= this.itemsCount) index = 0;\r\n\r\n                // Set slide\r\n                this.setSlide(index, 'next');\r\n            };\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @desc Handles dots click\r\n     * \r\n     * @var {number} index -- Clicked slide index\r\n     * \r\n     * @return {void}\r\n     */\r\n    private dotSlide(): void {\r\n        if (this.options['hasDots']) {\r\n            this.slideshowDots.forEach((dot:any) => {\r\n                dot.onclick = () => {\r\n                    // Find index\r\n                    let index:number = Number(dot.dataset.index);\r\n\r\n                    // Set slide\r\n                    if (index != this.activeIndex) this.setSlide(index);\r\n                };\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @desc Handles automatic slide\r\n     * \r\n     * @param {number} timeout -- Slideshow timeout\r\n     * \r\n     * @var   {number} remain  -- Remaining time\r\n     * \r\n     * @return {void}\r\n     */\r\n    private autoSlide(timeout:number = 0): void {\r\n        if (this.options['isAutoplay']) {\r\n            let remain:number;\r\n\r\n            // Set remain time\r\n            if (timeout) remain = timeout;\r\n            else         remain = this.options['timeout'];\r\n\r\n            // Set slide interval\r\n            this.slideInterval = setInterval(() => {\r\n                // Set next slide\r\n                if (!this.pauseIntervals) this.slideshowNext.click();\r\n                \r\n            }, remain);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @desc Handles slideshow hover events\r\n     * \r\n     * @return {void}\r\n     */\r\n    private hoverEvents(): void {\r\n        // On hover\r\n        this.slideshow.onmouseover = () => {\r\n            // Pause the interval\r\n            this.pauseIntervals = true;\r\n\r\n            // Clear the interval\r\n            if (this.slideInterval) clearInterval(this.slideInterval);\r\n        };\r\n\r\n        // On leave hover\r\n        this.slideshow.onmouseleave = () => {\r\n            // Resume the interval\r\n            this.pauseIntervals = false;\r\n\r\n            // Clear the interval\r\n            if (this.slideInterval) clearInterval(this.slideInterval);\r\n\r\n            // Rerun the slideshow with the remaining time\r\n            this.autoSlide(this.remainingTime);\r\n\r\n            // Rerun the slide timer\r\n            this.slideTimer();\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * @desc Handles slideshow window events\r\n     * \r\n     * @var {number}      windowWidth -- Window available width\r\n     * @var {HTMLElement} inner       -- The inner media element\r\n     * \r\n     * @return {void}\r\n     */\r\n    private windowEvents(): void {\r\n        // Leave window\r\n        window.onblur = () => {\r\n            // Pause the media\r\n            // Video\r\n            if (this.activeItem.querySelector('video')) this.activeItem.querySelector('video').pause();\r\n\r\n            // Audio\r\n            if (this.activeItem.querySelector('audio')) this.activeItem.querySelector('audio').pause();\r\n\r\n            // Pause the interval\r\n            this.pauseIntervals = true;\r\n\r\n            // Clear the interval\r\n            if (this.slideInterval) clearInterval(this.slideInterval);\r\n        };\r\n        \r\n        // Show window\r\n        window.onfocus = () => {\r\n            // Reload the media\r\n            if (this.options['mediaAutoplay']) {\r\n                // Video\r\n                if (this.activeItem.querySelector('video')) {\r\n                    this.activeItem.querySelector('video').play();\r\n                }\r\n\r\n                // Audio\r\n                if (this.activeItem.querySelector('audio')) {\r\n                    this.activeItem.querySelector('audio').play();\r\n                }\r\n            }\r\n\r\n            // Resume the interval\r\n            this.pauseIntervals = false;\r\n\r\n            // Clear the interval\r\n            if (this.slideInterval) clearInterval(this.slideInterval);\r\n\r\n            // Rerun the slideshow with the remaining time\r\n            this.autoSlide(this.remainingTime);\r\n\r\n            // Rerun the slide timer\r\n            this.slideTimer();\r\n        };\r\n\r\n        // Window resize\r\n        window.onresize = () => {\r\n            // Reset height\r\n            this.height = 0;\r\n\r\n            // Check items media\r\n            this.slideshowMedias.forEach((media:any) => {\r\n                // Inner element\r\n                if (media.firstElementChild) {\r\n                    const inner = media.firstElementChild;\r\n\r\n                    // Set height property\r\n                    if (!this.options['height'] && inner.clientHeight > this.height) this.height = inner.clientHeight;\r\n                    if (!this.options['height'] && this.height > window.innerHeight) this.height = window.innerHeight;\r\n                    // if (!this.options['height'] && inner.getBoundingClientRect().height > this.height) this.height = inner.getBoundingClientRect().height;\r\n                }\r\n                // Only text\r\n                else {\r\n                    // Set height property\r\n                    if (!this.options['height'] && media.getBoundingClientRect().height > this.height) this.height = media.getBoundingClientRect().height;\r\n                }\r\n            });\r\n            \r\n            \r\n            /**\r\n             * Slideshow height\r\n             */\r\n            // Check height property\r\n            if (this.options['height']) this.height = this.options['height'];\r\n\r\n            // Window width\r\n            const windowWidth = window.innerWidth;\r\n\r\n            // Desktop\r\n            if (windowWidth >= this.desktopWidth && this.options['desktopHeight']) {\r\n                this.slideshow.style.height = this.options['desktopHeight'];\r\n            }\r\n            // Tablet\r\n            else if (windowWidth < this.desktopWidth && windowWidth >= this.tabletWidth && this.options['tabletHeight']) {\r\n                this.slideshow.style.height = this.options['tabletHeight'];\r\n            }\r\n            // Smartphone\r\n            else if (windowWidth < this.tabletWidth && windowWidth >= this.phoneWidth && this.options['phoneHeight']) {\r\n                this.slideshow.style.height = this.options['phoneHeight'];\r\n            }\r\n            // All devices\r\n            else {\r\n                if (this.options['height']) this.slideshow.style.height = this.options['height'];\r\n                else                        this.slideshow.style.height = this.height + 'px';\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * @desc Handles slideshow events\r\n     * \r\n     * @return {void}\r\n     */\r\n    private slideEvents(): void {\r\n        if (this.options['isAutoplay']) {\r\n            // Pause on hover\r\n            if (this.options['hoverPause']) {\r\n                // Hover events \r\n                this.hoverEvents();\r\n            }\r\n\r\n            // Window events\r\n            this.windowEvents();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @desc Handles slides timer\r\n     * \r\n     * @var {number} progressWidth -- The slideshow progress width (0-100)\r\n     * \r\n     * @return {void}\r\n     */\r\n    private slideTimer():void {\r\n        // Clear the interval\r\n        if (this.timerInterval) clearInterval(this.timerInterval);\r\n\r\n        if (this.options['isAutoplay']) {\r\n            // Check progress option\r\n            if (!this.pauseIntervals) {\r\n                let progressWidth:number;\r\n\r\n                // Default remaining time\r\n                if (this.remainingTime <= 0) this.remainingTime = this.options['timeout'];\r\n\r\n                // Set timer interval\r\n                this.timerInterval = setInterval(() => {\r\n                    // Set remaining time\r\n                    this.remainingTime -= 10;\r\n\r\n                    // Produce progress width\r\n                    progressWidth = 100 - ((this.remainingTime / this.options['timeout']) * 100);\r\n\r\n                    // Set the progress width\r\n                    if (this.options['hasProgress']) this.slideshowProgress.style.width = progressWidth + '%';\r\n\r\n                    // Check pause or remaining time\r\n                    if (this.pauseIntervals || this.remainingTime <= 0) {\r\n                        clearInterval(this.timerInterval);\r\n                        \r\n                        if (this.remainingTime <= 0 && this.options['hasProgress']) this.slideshowProgress.style.width = '0%';\r\n                    }\r\n\r\n                }, 10);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @desc Sets a slide\r\n     * \r\n     * @param {number} index -- The index number\r\n     * @param {number} mode -- The slide mode (next, previous)\r\n     * \r\n     * @var {HTMLElement}   slide            -- The slideshow item (slide)\r\n     * @var {HTMLElement}   media            -- The item media\r\n     * @var {HTMLElement[]} overlays         -- The item overlays\r\n     * @var {HTMLElement[]} captions         -- The item captions\r\n     * @var {string}        mediaAnimation   -- The media animation\r\n     * @var {string}        overlayAnimation -- A specefic overlay animation\r\n     * @var {string}        captionAnimation -- A specefic caption animation\r\n     * @var {string}        slideMode        -- The slide mode {next, previous}\r\n     * \r\n     * @return {void}\r\n     */\r\n    private setSlide(index:number, mode:null|string = null): void {\r\n        // Check sliding\r\n        if (!this.sliding) {\r\n            // Reset the timer\r\n            this.remainingTime = 0;\r\n\r\n            // Clear the timer interval\r\n            if (this.timerInterval) clearInterval(this.timerInterval);\r\n\r\n            // Reset the progress\r\n            if (this.options['hasProgress']) this.slideshowProgress.style.width = '0%';\r\n\r\n            // Start sliding\r\n            this.sliding = true;\r\n\r\n            // Stop the slide interval\r\n            if (this.slideInterval) clearInterval(this.slideInterval);\r\n    \r\n            // Rest the progressbar\r\n            if (this.options['hasProgress']) this.slideshowProgress.style.width = '0%'\r\n    \r\n            // Default vaiables\r\n            let slide:any, media:any, overlays:any[], captions:any[];\r\n            let mediaAnimation:string, overlayAnimation:string, captionAnimation:string;\r\n            let slideMode:string;\r\n    \r\n            // Set mode\r\n            if (mode)                           slideMode = mode;\r\n            else if (index >= this.activeIndex) slideMode = 'next';\r\n            else                                slideMode = 'previous';\r\n    \r\n    \r\n            /**\r\n             * Old (current) Slide\r\n             */\r\n            if (!this.firstLoad) {\r\n                // Fetch old slide items\r\n                slide    = this.slideshowItems[this.activeIndex];\r\n                media    = slide.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowMedia}`);\r\n                overlays = slide.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowOverlay}`);\r\n                captions = slide.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCaption}`);\r\n        \r\n                // Fetch the active slide & dot\r\n                this.activeItem = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowItem}.${this.nameActive}`);\r\n                this.activeDot  = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowDots} li.${this.nameActive}`);\r\n        \r\n                // Remove active class\r\n                this.removeClass(this.activeItem, this.nameActive);\r\n        \r\n                // Remove active dot class\r\n                if (this.activeDot) {\r\n                    // Remove active class\r\n                    this.removeClass(this.activeDot, this.nameActive);\r\n                }\r\n        \r\n                // Hide media\r\n                if (media) {\r\n                    // Pause the media\r\n                    // Video\r\n                    if (media.querySelector('video')) media.querySelector('video').pause();\r\n\r\n                    // Audio\r\n                    if (media.querySelector('audio')) media.querySelector('audio').pause();\r\n    \r\n                    // Find animation\r\n                    if (media.dataset.exit)                                            mediaAnimation = media.dataset.exit;\r\n                    else if (media.dataset.exitPrev && slideMode == 'previous')        mediaAnimation = media.dataset.exitPrev;\r\n                    else if (media.dataset.exitNext && slideMode == 'next')            mediaAnimation = media.dataset.exitNext;\r\n                    else if (this.options['mediaExit'])                                mediaAnimation = this.options['mediaExit'];\r\n                    else if (this.options['mediaExitPrev'] && slideMode == 'previous') mediaAnimation = this.options['mediaExitPrev'];\r\n                    else if (this.options['mediaExitNext'] && slideMode == 'next')     mediaAnimation = this.options['mediaExitNext'];\r\n                    else                                                               mediaAnimation = this.animationExit;\r\n        \r\n                    // Set animation\r\n                    this.animation(media, mediaAnimation);\r\n                }\r\n        \r\n                // Hide overlays\r\n                if (overlays.length) {\r\n                    overlays.forEach((overlay:any) => {\r\n                        // Find animation\r\n                        if (overlay.dataset.exit)                                            overlayAnimation = overlay.dataset.exit;\r\n                        else if (overlay.dataset.exitPrev && slideMode == 'previous')        overlayAnimation = overlay.dataset.exitPrev;\r\n                        else if (overlay.dataset.exitNext && slideMode == 'next')            overlayAnimation = overlay.dataset.exitNext;\r\n                        else if (this.options['overlayExit'])                                overlayAnimation = this.options['overlayExit'];\r\n                        else if (this.options['overlayExitPrev'] && slideMode == 'previous') overlayAnimation = this.options['overlayExitPrev'];\r\n                        else if (this.options['overlayExitNext'] && slideMode == 'next')     overlayAnimation = this.options['overlayExitNext'];\r\n                        else                                                                 overlayAnimation = this.animationExit;\r\n        \r\n                        // Set animation\r\n                        this.animation(overlay, overlayAnimation);\r\n                    });\r\n                }\r\n                \r\n                // Hide captions\r\n                if (captions.length) {\r\n                    captions.forEach((caption:any) => {\r\n                        // Find animation\r\n                        if (caption.dataset.exit)                                            captionAnimation = caption.dataset.exit;\r\n                        else if (caption.dataset.exitPrev && slideMode == 'previous')        captionAnimation = caption.dataset.exitPrev;\r\n                        else if (caption.dataset.exitNext && slideMode == 'next')            captionAnimation = caption.dataset.exitNext;\r\n                        else if (this.options['captionExit'])                                captionAnimation = this.options['captionExit'];\r\n                        else if (this.options['captionExitPrev'] && slideMode == 'previous') captionAnimation = this.options['captionExitPrev'];\r\n                        else if (this.options['captionExitNext'] && slideMode == 'next')     captionAnimation = this.options['captionExitNext'];\r\n                        else                                                                 captionAnimation = this.animationExit;\r\n        \r\n                        // Set animation\r\n                        this.animation(caption, captionAnimation);\r\n                    });\r\n                }\r\n            }\r\n    \r\n    \r\n            /**\r\n             * New Slide\r\n             */\r\n            // Update the first load\r\n            if (this.firstLoad) this.firstLoad = false;\r\n\r\n            // Find new slide items\r\n            slide    = this.slideshowItems[index];\r\n            media    = slide.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowMedia}`);\r\n            overlays = slide.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowOverlay}`);\r\n            captions = slide.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCaption}`);\r\n    \r\n            // Update the active item\r\n            this.activeItem = slide;\r\n    \r\n            // Add active class to slide\r\n            this.addClass(slide, this.nameActive);\r\n    \r\n            // Add active class to relative dot\r\n            this.slideshowDots.forEach((dot:any) => {\r\n                if (Number(dot.dataset.index) == index) {\r\n                    this.addClass(dot, this.nameActive);\r\n    \r\n                    // Update the active dot\r\n                    this.activeDot = dot;\r\n                }\r\n            });\r\n    \r\n            // Show media\r\n            if (media) {\r\n                // Reload the media\r\n                if (this.options['mediaAutoplay']) {\r\n                    // Video\r\n                    if (media.querySelector('video')) {\r\n                        media.querySelector('video').load();\r\n                        media.querySelector('video').play();\r\n                    }\r\n\r\n                    // Audio\r\n                    if (media.querySelector('audio')) {\r\n                        media.querySelector('audio').load();\r\n                        media.querySelector('audio').play();\r\n                    }\r\n                }\r\n\r\n                // Find animation\r\n                if (media.dataset.enter)                                            mediaAnimation = media.dataset.enter;\r\n                else if (media.dataset.enterPrev && slideMode == 'previous')        mediaAnimation = media.dataset.enterPrev;\r\n                else if (media.dataset.enterNext && slideMode == 'next')            mediaAnimation = media.dataset.enterNext;\r\n                else if (this.options['mediaEnter'])                                mediaAnimation = this.options['mediaEnter'];\r\n                else if (this.options['mediaEnterPrev'] && slideMode == 'previous') mediaAnimation = this.options['mediaEnterPrev'];\r\n                else if (this.options['mediaEnterNext'] && slideMode == 'next')     mediaAnimation = this.options['mediaEnterNext'];\r\n                else                                                                mediaAnimation = this.animationEnter;\r\n    \r\n                // Set animation\r\n                this.animation(media, mediaAnimation).then(() => {\r\n                    // Clear the timer interval\r\n                    if (this.timerInterval) clearInterval(this.timerInterval);\r\n\r\n                    // Stop the intervals\r\n                    if (this.slideInterval) clearInterval(this.slideInterval);\r\n                    \r\n                    // Run Autoplay\r\n                    this.autoSlide();\r\n    \r\n                    // Run timer\r\n                    this.slideTimer();\r\n\r\n                    // Stop sliding\r\n                    this.sliding = false;\r\n                });\r\n            }\r\n    \r\n            // Show overlays\r\n            if (overlays.length) {\r\n                overlays.forEach((overlay:any) => {\r\n                    // Find animation\r\n                    if (overlay.dataset.enter)                                            overlayAnimation = overlay.dataset.enter;\r\n                    else if (overlay.dataset.enterPrev && slideMode == 'previous')        overlayAnimation = overlay.dataset.enterPrev;\r\n                    else if (overlay.dataset.enterNext && slideMode == 'next')            overlayAnimation = overlay.dataset.enterNext;\r\n                    else if (this.options['overlayEnter'])                                overlayAnimation = this.options['overlayEnter'];\r\n                    else if (this.options['overlayEnterPrev'] && slideMode == 'previous') overlayAnimation = this.options['overlayEnterPrev'];\r\n                    else if (this.options['overlayEnterNext'] && slideMode == 'next')     overlayAnimation = this.options['overlayEnterNext'];\r\n                    else                                                                  overlayAnimation = this.animationEnter;\r\n    \r\n                    // Set animation\r\n                    this.animation(overlay, overlayAnimation);\r\n                });\r\n            }\r\n            \r\n            // Show captions\r\n            if (captions.length) {\r\n                captions.forEach((caption:any) => {\r\n                    // Find animation\r\n                    if (caption.dataset.enter)                                            captionAnimation = caption.dataset.enter;\r\n                    else if (caption.dataset.enterPrev && slideMode == 'previous')        captionAnimation = caption.dataset.enterPrev;\r\n                    else if (caption.dataset.enterNext && slideMode == 'next')            captionAnimation = caption.dataset.enterNext;\r\n                    else if (this.options['captionEnter'])                                captionAnimation = this.options['captionEnter'];\r\n                    else if (this.options['captionEnterPrev'] && slideMode == 'previous') captionAnimation = this.options['captionEnterPrev'];\r\n                    else if (this.options['captionEnterNext'] && slideMode == 'next')     captionAnimation = this.options['captionEnterNext'];\r\n                    else                                                                  captionAnimation = this.animationEnter;\r\n    \r\n                    // Set animation\r\n                    this.animation(caption, captionAnimation);\r\n                });\r\n            }\r\n    \r\n            // Set counter\r\n            if (this.options['hasCounter']) this.slideshowCounter.innerHTML = `${Number(slide.dataset.index) + 1}/${this.itemsCount}`;\r\n    \r\n            // Update active index\r\n            this.activeIndex = index;\r\n        }\r\n    }\r\n\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Config","constructor","this","modSep","chiSep","sibSep","parSep","nameDoc","nameLight","nameDark","nameAnimation","nameAnimated","nameRipple","nameAlert","nameMessages","nameBackdrop","namePopup","nameMenu","nameModal","nameBlueprint","nameContainer","nameControl","nameIcon","nameContent","nameClose","nameClick","nameActive","nameVoid","nameOpen","nameHeader","nameBody","nameFooter","nameWidth","nameHeight","nameRadius","namePosition","fadeInAnimation","fadeOutAnimation","hideYAnimation","rippleAnimation","rippleAutoAnimation","piAlertCircle","piAlertTri","piAlertTick","piClose","hideTimeout","alertPosition","polarisSizes","phoneWidth","tabletWidth","desktopWidth","Helpers","super","removeBefore","str","find","strict","split","pop","removeAfter","exist","selector","result","status","message","document","querySelectorAll","length","querySelector","selectors","visible","from","tolerance","rect","windowHeight","window","innerHeight","viewHeight","Math","max","documentElement","clientHeight","getBoundingClientRect","bottom","top","prepend","parent","content","classList","id","style","attrs","parentNode","node","createElement","forEach","cls","add","setAttribute","cssText","attr","innerHTML","insertBefore","firstChild","append","appendChild","remove","write","open","close","loop","fn","delay","count","Infinity","i","interval","setInterval","clearInterval","loaded","addEventListener","escape","replace","RegExp","redirect","url","location","href","origin","scrollWidth","innerWidth","clientWidth","fileExist","file","xhr","XMLHttpRequest","send","json","Promise","resolve","reject","final","fetch","then","response","text","copy","navigator","clipboard","writeText","err","console","error","addClass","contains","removeClass","toggleClass","oldCls","newCls","addClasses","upper","toLocaleUpperCase","lower","toLocaleLowerCase","getStyle","property","view","ownerDocument","defaultView","getComputedStyle","getPropertyValue","isFullscreen","screen","width","height","fullscreen","elem","requestFullScreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullScreen","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","Animations","animation","clear","removeProperty","datasets","setProperty","event","stopPropagation","once","dataset","duration","function","state","position","scale","perspective","degree","brightness","dimension","animated","mod","nodes","animationEnter","enter","animationExit","exit","animating","getAttribute","offsetTop","navigated","active","navigators","scrollY","offsetHeight","offset","link","slideshow","options","nameSlideshow","nameSlideshowItem","nameSlideshowMedia","nameSlideshowOverlays","nameSlideshowOverlay","nameSlideshowCaptions","nameSlideshowCaption","nameSlideshowOption","nameSlideshowProgress","nameSlideshowCounter","nameSlideshowPrev","nameSlideshowNext","nameSlideshowDots","nameSlideshowFilter","slideshowItems","slideshowMedias","slideshowProgress","slideshowCounter","slideshowPrev","slideshowNext","slideshowDots","itemsCount","activeItem","activeDot","activeIndex","slideInterval","timerInterval","pauseIntervals","remainingTime","sliding","firstLoad","mediaLoaded","mediaShrink","isAutoplay","hoverPause","timeout","hasProgress","hasCounter","hasControls","hasDots","slideshowColor","mediaFilter","mediaControls","mediaAutoplay","start","setItems","setOptions","prevSlide","nextSlide","dotSlide","slideEvents","setSlide","index","media","setContent","overlay","caption","fileExtension","ext","arr","mode","inner","maxWidth","alt","type","controls","muted","Number","parentElement","src","includes","html","firstElementChild","maxHeight","onload","naturalWidth","onloadedmetadata","setTimeout","controlsContent","dotsContent","display","windowWidth","filterCls","inset","margin","dots","captions","overlays","onclick","dot","autoSlide","remain","click","hoverEvents","onmouseover","onmouseleave","slideTimer","windowEvents","onblur","pause","onfocus","play","onresize","progressWidth","slide","mediaAnimation","overlayAnimation","captionAnimation","slideMode","exitPrev","exitNext","load","enterPrev","enterNext"],"sourceRoot":""}